:: Widgets Hopeless Cycle [widget]
<<widget "hopelessCycleStart">>
	/*Store player stats*/
	<<if !$frozenValues>>
		<<freezePlayerStats>>
	<</if>>
	/*morph player into the witch's gaoler*/
	<<visionPrepMorph>>

	<<set $condomLvl to 0>>
	<<unset $condoms>>

	<<set $player.gender to "m">>
	<<set $player.sex to "m">>
	<<set $player.breastsize to 0>>
	<<set $penisstate to 0>>
	<<set $penisuse to 0>>
	<<set $vaginastate to "none">>
	<<set $vaginause to "none">>
	<<set $player.vaginaExist to false>>
	<<set $player.penisExist to true>>
	<<set $player.ballsExist to true>>
	<<set $player.virginity.temple to true>>
	<<set $player.virginity.handholding to false>>
	<<set $player.gender_posture to "m">>
	<<set $player.gender_body to "m">>

	<<set $player.penissize to 3>>
	<<set $semen_volume to 500>>
	<<set $semen_amount to 500>>

	/* Prevent things that often cause disrupting messages */
	<<set $milk_volume to 0>>
	<<set $milk_amount to 0>>
	<<set $lactating to 0>>
	<<set $sexStats.vagina.pregnancy.totalBirthEvents to 0>>
	<<set $vaginaWetness to 0>>
	<<set $penisWetness to 0>>
	<<set $anusWetness to 0>>
	<<set $uncomfortable.hypnosis to true>>
	<<set $harper_appointments.hypnosis to 0>><<set $hypnosis_traits to {}>>

	/* body */
	<<set $player.bodyshape to "slender">>
	<<set $facevariant to "aloof">>
	<<set $player.freckles to false>>
	<<set $naturalhaircolour = "softblond">>
	<<set $haircolour to "softblond">>
	<<set $hairfringecolour to "softblond">>
	<<set $hairColourGradient.colours to ["softblond", "softblond"]>>
	<<set $hairFringeColourGradient.colours to ["softblond", "softblond"]>>
	<<set $hairlength to 400>>
	<<set $hairlengthstage to "chest">>
	<<set $hairtype to "neat">>
	<<set $fringelength to 200>>
	<<set $fringelengthstage to "shoulder">>
	<<set $fringetype to "framed">>
	<<set $hairposition to "back">>
	<<set $rightEyeColour to "grey">>
	<<set $leftEyeColour to "grey">>
	<<set $bodysize to 3>>

	<<set $makeup.lipstick = 0>>
	<<set $makeup.eyeshadow = 0>>
	<<set $makeup.eyelenses = {"left":0, "right":0}>>
	<<set $makeup.blusher = 0>>
	<<set $makeup.mascara = 0>>
	<<set $makeup.mascara_running = 0>>
	<<set $makeup.pbcolour = 0>>
	<<set $makeup.browscolour = 0>>
	<<set $makeup.concealer = 0>>
	<<set $pbgrowth to 0>>
	<<set $pblevel to 0>>
	<<set Skin.color.tan to 65>>

	<<set $arousal to 0>>
	<<set $pain to 0>>
	<<set $tiredness to 800>>
	<<set $stress to 900>>
	<<set $trauma to 500>>
	<<set $control to 1000>>
	<<set $submissive to 750>>
	<<set $awareness to 300>>
	<<set $awarelevel to 0>>
	<<set $physique to 16000>>
	<<set $willpower to 700>>
	<<set $spraymax to 0>>
	<<set $money to 0>>
	<<set $innocencestate to 0>>

	<<set $angel to 4>>
	<<set $angelbuild to 40>>
	<<set $purity to 1000>>
	<<set $beauty to 4000>>
	<<set $drugged to 0>>
	<<set $hallucinogen to 0>>

	<<set $promiscuity to 0>>
	<<set $exhibitionism to 0>>
	<<set $deviancy to 0>>
	<<set $skulduggery to 200>>
	<<set $danceskill to 600>>
	<<set $swimmingskill to 600>>
	<<set $athletics to 800>>
	<<set $tending to 500>>
	<<set $housekeeping to 700>>
	<<set $seductionskill to 0>>
	<<set $oralskill to 0>>
	<<set $handskill to 800>>
	<<set $analskill to 0>>
	<<set $chestskill to 0>>
	<<set $thighskill to 0>>
	<<set $bottomskill to 0>>
	<<set $feetskill to 0>>
	<<set $penileskill to 0>>

	<<set $temple_rank to "monk">><<set $templePromised to "">>
	<<unset $avery_fate>><<unset $auriga_artefact>>

	/* Set traits, and prevent things that often cause irregular traits */
	<<set $sciencetrait to 0>><<set $mathstrait to 0>><<set $historytrait to 0>><<set $englishtrait to 0>><<set $schooltrait to 0>>
	<<set $scienceprojectwon to 0>><<set $mathsprojectwon to 0>><<set $englishPlayWell to 0>>
	<<set $islander_language to 100>><<set $temple_burden to 5>><<set $prof.baton to 200>><<set $prof.whip to 800>><<set $temple_weapon to "whip">>
	<<set $angelBanish to 3>><<set $angelBanishMax to 3>>
	<<set $sadism to 180>><<set $sadism_level to 1>>
	<<set $backgroundTraits to ['waif']>>
	<<set $sexStats.anus.pregnancy.motherStatus to 0>>
	<<set $heterochromia to 0>>
	<<set $farm_stage to 0>>
	<<set $masochism to 0>><<set $masochism_level to 0>>
	<<set $farm_stage to 0>><<set $quicksand to 0>><<set $orgasmtrait to 0>>
	<<set $choketrait to 0>><<set $ejactrait to 0>><<set $rapetrait to 0>><<set $voretrait to 0>><<set $milkdranktrait to 0>>
	<<set $robinpaid to 0>><<set $syndromeeden to 0>><<set $syndromekylar to 0>><<set $syndromewolves to 0>><<set $syndromebird to 0>>
	<<run Object.keys(V.transformationParts).forEach((tf) => {
		Object.entries(V.transformationParts[tf]).forEach(([part, value]) => {
			if (value !== 'disabled') {
				V.transformationParts[tf][part] = 'disabled';
			}
		});
	})>>

	<<set $loveInterest to {
		primary: "None",
		secondary: "None",
		tertiary: "None"
	}>>

	/*change location and time*/
	<<set $moonstate to 0>>
	<<set Time.setDate(new DateTime(1390, 5, 24, 18, 30))>><<set V.weatherObj.snow = (0)>>
	<<set $location to "old_temple">><<set $outside to 0>>
	/*give player clothes*/
	<<generalRuined "head">>
	<<generalRuined "face">>
	<<generalRuined "neck">>

	<<upperwear 170 "black" "white">>
	<<generalRuined "under_upper">>
	<<underlowerwear 21 "black">>
	<<legswear 40>>

	<<generalRuined "hands">>
	<<feetwear 43>>

	<<generalRuined "genitals">>
	<<generalRuined "handheld">>

	<<add_bodywriting "left_shoulder" "cross" brand>>
	<<add_bodywriting "right_shoulder" "cross" brand>>
	<<add_bodywriting "back" "cross" brand>>

	<<set $upperTucked to 0>><<set $lowerTucked to 0>>

	<<set $hc to {
		intro: false,
		hour: Time.hour,
		day: Time.monthDay,
		daysPassed: 0,
		daily: {},
		suspicion: 3,
		suspicionRevealed: false,
		dungeonTorchTime: 6,
		dungeonTorchState: "lit",
		disposals: 0,
		vanishedItems: []
	}>>
	<<set $prisoner to {
		love: 0,
		loveRevealed: false,
		health: 8,
		cleanBody: 2,
		cleanBandages: 1,
		bandagesOn: true,
		talked: 0,
		harmed: 0,
		harmedRecently: 0,
		punishmentsMissed: 0,
		state: "catatonic",
		name: "the witch"
	}>>
	<<set $prisonerEvents to []>>
	<<set $prisonerBrands to []>>
	<<run hcItemSetup()>>

	/* Generate NPCs */
	<<generateNPC 1 a m m 10>><<saveNPC 0 "hc_hand">>
	<<generateConfessor 2>><<saveNPC 1 "hc_hand_assistant">>
	<<generateNPC 3 t f f 10>><<saveNPC 2 "hc_witch">>
	<<generateNPC 4 a m m 0>><<saveNPC 3 "hc_abuser">>
	<<endevent>>

	<<if $hcEndings.includesAll("F","E","D","C","B","A")>>
		<<set $hc.trueEndAvailable to true>>
	<</if>>

	/* Challenge changes */
	<<if $hcChallenge.prisonerClean>>
		<<set $prisoner.cleanBody to 0>><<set $prisoner.cleanBandages to 0>>
	<</if>>
	<<if $hcChallenge.faithBanish>>
		<<set $angelBanish to 1>><<set $angelBanishMax to 1>>
	<</if>>
	<<if $hcChallenge.faithBurden>>
		<<set $temple_burden to 50>>
	<</if>>
	<<if $hcChallenge.waterEarly>>
		<<set $hc.wellTainted to true>>
	<</if>>

<</widget>>

<<widget "hopelessCycleEffects">>
	/* V.statFreeze prevents everything in the time system from running except for minutes so this sequence uses its own time tracking */

	<<if ["cell", "guardhouse"].includes($bus)>>
		<<set $_holdChangesUntilPlayerLeaves to true>>
	<</if>>

	<<if $prisoner.punishmentsMissed gte 2>>
		<<set $hc.suspicion to 100>>
	<</if>>
	<<canvas-model-override "mouth" "neutral">>

	/* Daily */
	<<if $hc.day isnot Time.monthDay>>
		<<set $hc.day to Time.monthDay>>
		<<set $_dayPassed to true>>

		<<purity 30>>
		<<if $angel gte 4>>
			<<if !$hcChallenge.faithBanish>>
				<<set $angelBanishMax = Math.floor($angelbuild / 10)>>
				<<set $angelBanish = $angelBanishMax>>
			<</if>>
		<<else>>
			<<set $angelBanish = 0>>
		<</if>>

		<<set $_daysUntilBloodMoon to Time.lastDayOfMonth - Time.monthDay>>
		<<set $hc.daysPassed++>>
		<b>Day <<number $hc.daysPassed>> - <span class="red">
			<<if $_daysUntilBloodMoon is 0>>
				Night of the blood moon
			<<elseif $_daysUntilBloodMoon is 1>>
				One day until the blood moon
			<<else>>
				<<Number $_daysUntilBloodMoon>> days until the blood moon
			<</if>>
		</span></b>
		<br><br>

		<<run {
			let amount = V.player.penissize - 1;
			if (V.semen_volume <= 24) amount++;
			amount -= Math.floor(V.semen_volume / 250);
			statChange.semenvolume(amount);
		}>>
		<<run {
			const effects = (level, stat) => {
			switch (level) {
				case 0:
					if (stat >= 100) return { level: 1, message: "up 1" };
					break;
				case 1:
					if (stat >= 300) return { level: 2, message: "up 2" };
					else if (stat <= 50) return { level: 0, message: "down 0" };
					break;
				case 2:
					if (stat >= 500) return { level: 3, message: "up 3" };
					else if (stat <= 200) return { level: 1, message: "down 1" };
					break;
				case 3:
					if (stat >= 800) return { level: 4, message: "up 4" };
					else if (stat <= 400) return { level: 2, message: "down 2" };
					break;
				case 4:
					if (stat <= 700) return { level: 3, message: "down 3" };
					break;
			}
			return false;
		};

		V.masochism *= 0.985;
		const masochism = effects(V.masochism_level, V.masochism);
		if (masochism) {
			V.masochism_level = masochism.level;
			V.masochism_message = masochism.message;
			V.effectsmessage = 1;
		}
		V.sadism *= 0.985;
		const sadism = effects(V.sadism_level, V.sadism);
		if (sadism) {
			V.sadism_level = sadism.level;
			V.sadism_message = sadism.message;
			V.effectsmessage = 1;
		}
		}>>

		<<if $sadism_message>>
			<<switch $sadism_message>>
				<<case "up 1">>
					<span class="blue">Your thoughts turn to the pain you've inflicted. You shiver.
					<i>You've become a guilty sadist.</i></span>
				<<case "up 2">>
					<span class="purple">Your thoughts turn to the pain you've inflicted. A thrill follows, unbeckoned.
					<i>You've become a normal sadist.</i></span>
				<<case 3>>
					<span class="pink">You yearn to hurt others.
					<i>You've become a hardened sadist.</i></span>
				<<case "up 4">>
					<span class="red">If they want to play rough, so be it.
					<i>You've become a vengeful sadist.</i></span>
				<<case "down 0">>
					<span class = "lblue"><i>You are no longer a sadist.</i></span>
				<<case "down 1">>
					<span class="blue">You are no longer so sadistic, and can only be considered a
					<i>guilty sadist.</i></span>
				<<case "down 2">>
					<span class="purple">You are no longer so sadistic, and can only be considered a
					<i>normal sadist.</i></span>
				<<case "down 3">>
					<span class="pink">You are no longer so sadistic, and can only be considered a
					<i>hardened sadist.</i></span>
			<</switch>>
			<br>
			<<unset $sadism_message>>
		<</if>>

		<<if $hc.daily.enteredDungeon>>
			<<set $hc.neverLeftDungeon to true>>
		<</if>>

		<<set $hc.doPrisonerDaily to true>>
		<<set $hc.prisonerDaily to $hc.daily>>

		<<if $hc.shortcutCount isnot undefined>>
			<<set $hc.shortcutCount to 0>>
		<</if>>

		/* Reset for the day */
		<<set $hc.daily to {}>>
	<</if>>

	/* Daily, but skip this part if player is in dungeon, will run when they exit */
	<<if $hc.doPrisonerDaily and !$_holdChangesUntilPlayerLeaves>>
		<<run delete $hc.doPrisonerDaily>>

		<<set $_prisonerClothes to $hcItems.find(clothes => clothes.type is "clothes" and clothes.location is "prisoner")>>
		<<set $_prisonerSheet to $hcItems.find(sheet => sheet.type is "sheets" and sheet.location is "prisoner")>>

		/* HEALTH AND CLEANLINESS */

		/* Health decay if not fed */
		<<if $hc.daysPassed gte 2 or $prisonerEvents.includes("hunger")>>
			<<if !$hc.prisonerDaily.fed>><<hcPrisonerHealth -5>><</if>>
		<</if>>

		/* Decay from tainted items in cell*/
		<<set $_taintedDecay to hcItemsFilter(items => items.location is "cell" and items.dirty gte 2).length>>
		<<if $_taintedDecay>>
			<<hcPrisonerHealth $_taintedDecay*-1>>
		<</if>>

		/* Decay from wearing dirty/tainted clothes or no clothes */
		<<if $_prisonerClothes?.dirty gte 1>>
			<<hcPrisonerHealth `Math.clamp($_prisonerClothes.dirty,0,2)*-1`>>
		<<elseif $_prisonerSheet?.dirty gte 1>>
			<<hcPrisonerHealth `Math.clamp($_prisonerSheet.dirty,0,2)*-1`>>
		<<elseif !$_prisonerClothes and !$_prisonerSheet>>
			<<hcPrisonerHealth -1>>
		<</if>>

		<<if $prisoner.bandagesOn and $prisoner.cleanBandages lte 2>>
			/* Big health decay and dirtiness if ends day with dirty bandages */
			<<hcPrisonerHealth -8>><<set $prisoner.cleanBody -= 3>>
			<<if $_prisonerClothes>>
				<<set $_prisonerClothes.dirty++>>
			<</if>>
			<<if !$_prisonerClothes and $_prisonerSheet>>
				<<set $_prisonerSheet.dirty++>>
			<</if>>
		<<elseif !$prisoner.bandagesOn>>
			/* Health decay and dirtiness if ends day without bandages */
			<<hcPrisonerHealth -4>><<set $prisoner.cleanBody -= 1>>
			<<if $_prisonerClothes>>
				<<set $_prisonerClothes.dirty++>>
			<</if>>
			<<if !$_prisonerClothes and $_prisonerSheet>>
				<<set $_prisonerSheet.dirty++>>
			<</if>>
		<<else>>
			<<hcPrisonerHealth 1>>
		<</if>>

		/* Cleanliness decay if not washed that day */
		<<if !$hc.prisonerDaily.washed>>
			<<set $prisoner.cleanBody -= 1>><<set $prisoner.cleanBandages -= 1>>
			<<if $_prisonerClothes>>
				<<set $_prisonerClothes.dirty++>>
			<</if>>
			/* Additionally, more health decay if branding event has happened */
			<<if $prisonerEvents.includes("brand")>>
				<<hcPrisonerHealth -5>>
			<</if>>
		<</if>>

		/* Dirty bandages each day, more if sick/injured */
		<<if $prisoner.health lte 10>>
			<<set $prisoner.cleanBandages -= 3>>
		<<elseif $prisoner.health lte 20>>
			<<set $prisoner.cleanBandages -= 2>>
		<<else>>
			<<set $prisoner.cleanBandages -= 1>>
		<</if>>

		/* Decay from not treating burns after branding event */
		<<if $prisonerEvents.includes("brand") and !$hc.prisonerDaily.treated>>
			<<hcPrisonerHealth -5>>
		<</if>>

		<<if $hc.prisonerDaily.treated>>
			<<set $hc.daily.treatedDayBefore to true>>
		<</if>>

		<<if $prisonerEvents.includes("talkHairBlooms")>>
			<<hcPrisonerHealth 1>>
		<</if>>

		/* Base health decay (increases based on event progress) */
		<<hcPrisonerHealth -3>>
		<<if $prisonerEvents.includes("silver")>>
			<<hcPrisonerHealth -1>>
		<</if>>
		<<if $prisonerEvents.includes("face")>>
			<<hcPrisonerHealth -2>>
		<</if>>
		<<if $prisonerEvents.includes("brand")>>
			<<hcPrisonerHealth -2>>
		<</if>>

		/* Base cleanliness decay */
		<<if $prisoner.cleanBody lte 2>>
			<<hcPrisonerHealth -1>>
			<<set $prisoner.cleanBandages -= 1>>
		<</if>>
		<<set $prisoner.cleanBody -= 1>>

		<<if $hc.daysPassed gte 2 and !$hc.prisonerDaily.dailyPunishment>>
			<<hcPrisonerHealth -6 "penance">><<set $prisoner.punishmentsMissed++>>
			<<if $prisoner.punishmentsMissed gte 2>>
				<<set $hc.endingETimer to 3>>
				<span class="red">You have avoided another penance. The Hand has deemed you bewitched.</span>
				<br>
			<<else>>
				<span class="red">You avoided <<print $prisoner.name>>'s daily penance.</span> <<hcSuspicion 30>><<hopelessCycleSus 3>>
				<br>
			<</if>>
		<</if>>

		<<if $prisoner.harmedRecently lte 0>>
			<<set $prisoner.harmed-->>
		<</if>>

		/* Challenge changes */
		<<if $hcChallenge.prisonerClean>>
			<<set $prisoner.cleanBody to 0>><<set $prisoner.cleanBandages to 0>>
		<</if>>
		<<if $hcChallenge.prisonerHealth>>
			<<hcPrisonerHealth -1>>
		<</if>>

		<<if $hc.daysPassed lte 1>>
			<<set $prisoner.health to Math.clamp($prisoner.health, 4, 30)>>
		<<elseif $prisoner.health lte 0 and !$hc.prisonerDaily.secondChance>>
			/* Ending F */
			<<set $hc.gameOver to true>>
		<</if>>

		<<if $hc.daysPassed gte 4 and $prisonerEvents.includes("face") and !$hc.nightBreakIn>>
			<<set $hc.nightBreakIn to "tonight">>
			<<set $hc.nightBreakInDay to $hc.day>>
		<</if>>

		<<if $hc.daysPassed gte 5 or $hcChallenge.dogsEarly>>
			<<set $hc.dogs to []>>
			<<set $hc.dogs.push("loud")>>
			<<set $hc.dogsTimer to [0]>>
			<<if $hcChallenge.dogsDouble>>
				<<set $hc.dogs.push("loud")>>
				<<set $hc.dogsTimer.push(0)>>
			<</if>>
		<</if>>

		<<run delete $hc.prisonerDaily>>
	<</if>>


	/* Hourly */
	<<if $hc.hour isnot Time.hour>>
		<<set $_hoursPassed to Time.hour - $hc.hour>>
		<<if $_hoursPassed lt 0>><<set $_hoursPassed += 24>><</if>>
		<<set $_containersToCheck to $hcItems.filter(cont => cont.containerID)>>
		<<set $_witchblooms to hcItemHolding("clutter", w => w.name is "witchblooms")>>
		<<for $_t = 0; $_t lt $_hoursPassed; $_t++>>
			<<run $hcItems.filter(item => item.time !== undefined && item.state is "lit").forEach(item => {
				item.time--;
				if (V.hcChallenge.torchFaster && item.time / 2 !== 0) item.time--;
				if (item.location is "disposal" and $rng gte 81) item.time--;
				if (item.location is "cell" and (Time.hour gte 23 or Time.hour lte 5) and $bus isnot "cell") V.hc.suspicion++;
				if (item.time lte 0) item.state = "burnt";
				Math.clamp(item.time, 0, 11);
			})>>

			<<run hcItemsFilter((item => item.dirty === 0 &&
			item.location !== "held" &&
			item.type !== "clutter" &&
			!$_containersToCheck.some(c => c.containerID === item.location))).forEach(toDirty => {
				if (toDirty.location is "disposal") {
					toDirty.dirty++;
				} else if ($rng gte 91) {
					toDirty.dirty++;
				}
				Math.clamp(toDirty.dirty, 0, 2);
			})>>

			/* Hourly effects on items that are not at their origin, held by the player, or in the same location as the player */
			<<set $hc.vanishedItems ||= []>><<set $hc.suspicionGained ||= 0>>
			<<run $hcItems.filter(items => ![V.bus, items.origin, "prisoner", "held"].includes(items.location) and !items.inSconce).forEach(item => {
				/* Time until item is discovered and removed */
				if (!item.vanishesIn) item.vanishesIn = 12;
				let hidden;
				if (V.hcItems.some(sheet => sheet.type is "sheets" && [item.location, item.containerID].includes(sheet.location)) && !V.hcChallenge.itemNoHide) hidden = true;
				let suspicionLevel;
				let vanishMult = 1;
				if (V.hcChallenge.itemFind) vanishMult = 2;
				switch (item.location) {
					case "disposal":
					case "forest":
					case "lake":
						/* Locations that NPCs wouldn't check */
						suspicionLevel = 0;
						item.vanishesIn -= 0.3;
						if (V.hcChallenge.forestItem && item.location !== "disposal" && !["forest","lake"].includes(V.bus)) item.vanishesIn -= 14;
						break;
					case "cell":
						/* Prisoner's cell */
						suspicionLevel = 5;
						item.vanishesIn -= 2 * vanishMult;
						break;
					case "bed":
						/* Player's bed, very rarely checked but very suspicious */
						suspicionLevel = 5;
						if (hidden) {
							item.vanishesIn -= 0.2 * vanishMult;
						} else {
							item.vanishesIn -= 0.5 * vanishMult;
						}
						break;
					case "guardhouse":
					case "garden":
					case "pyre":
						/* Frequently checked but not very suspicious places */
						suspicionLevel = 1;
						if (hidden) {
							item.vanishesIn -= 1 * vanishMult;
						} else {
							item.vanishesIn -= 2 * vanishMult;
						}
						break;
					case "prayerroom":
						/* Prayer room */
						if (V.hc.handLocation === "prayerroom") {
							suspicionLevel = 5;
							item.vanishesIn -= 14;
						}
						break;
					case "training":
					case "temple":
					case "cloister":
					case "quarters":
					case "dining":
						/* Places with high activity during the day */
						if (Time.dayState is "night") {
							suspicionLevel = 2;
							if (hidden) {
								item.vanishesIn -= 1 * vanishMult;
							} else {
								item.vanishesIn -= 3 * vanishMult;
							}
						} else {
							suspicionLevel = 2;
							if (hidden) {
								item.vanishesIn -= 3 * vanishMult;
							} else {
								item.vanishesIn -= 6 * vanishMult;
							}
						}
						break;
					default:
						/* Items in containers or undefined locations */
						break;
				}
				if (item.vanishesIn <= 0) {
					if (suspicionLevel >= 1) {
						let itemToPush = clone(item);
						if (itemToPush.containerID) {
							V.hcItems.filter(bye => bye.location === itemToPush.containerID).forEach(bye => {
								let itemToPushFromContainer = clone(bye);
								itemToPushFromContainer.fromCont = true;
								V.hc.vanishedItems.push(itemToPushFromContainer);
								V.hc.suspicionGained += suspicionLevel * 2;
								hcItemRemove(bye);
							})
						}
						V.hc.vanishedItems.push(itemToPush);
						V.hc.suspicionGained += suspicionLevel * 2;
					}
					hcItemRemove(item);
				}
			})>>

			<<run $hcItems.filter(item => item.time !== undefined && item.type is "water" && $hcChallenge.waterLeaky).forEach(item => {
				item.time--;
				if (item.time lte 0) {
					if (!T.leak) T.leak = [];
					let itemToPush = clone(item);
					T.leak.push(V.hcItems.find(x => x.containerID === itemToPush.location).location);
					if (T.leak[T.leak.length-1] === "bed" && V.passage === "Hopeless Cycle Sleep" || ["forest", "lake", "disposal"].includes(T.leak)) {
						/* Do nothing */
					} else {
						V.hc.suspicionGained += 5;
						if (T.leak[T.leak.length-1] !== "held") {
							itemToPush.location = T.leak[T.leak.length-1];
							V.hc.vanishedItems.push(itemToPush);
						}
					}
					hcItemRemove(item);
				}
				Math.clamp(item.time, 0, 3);
			})>>

			<<if $hc.dungeonTorchState is "lit">>
				<<if Time.dayState is "night">>
					<<hcSuspicion 1>>
				<</if>>
				<<set $hc.dungeonTorchTime-->>
				<<if $hc.dungeonTorchTime lte 0>>
					<<set $hc.dungeonTorchState to "burnt">>
				<</if>>
				<<set $hc.dungeonTorchTime to Math.clamp($hc.dungeonTorchTime, 0, 11);>>
			<<elseif ["snuffed","burnt"].includes($hc.dungeonTorchState) and !["dusk","night"].includes(Time.dayState) and Time.hour gte 12>>
				<<hcSuspicion 1>>
				<<if $hc.handLocation is "guardhouse">>
					<<hcSuspicion 1>>
				<</if>>
			<</if>>

			<<if $_witchblooms and $bus is "bed">>
				<<set $_witchblooms.progress to $_witchblooms.progress || 0>>
				<<set $_witchblooms.progress++>><<purity -5>>
			<</if>>

			<<set $prisoner.harmedRecently-->>
		<</for>>

		<<if $hc.daysPassed gte 1 and !$hc.daily.sermon>>
			<<if Time.hour gte 10>>
				<<set $hc.daily.sermon to true>>
				<<if $hc.sermonMissed>>
					<<set $hc.endingETimer to 3>>
					<span class="red">You missed another sermon in the cloister. The Hand has deemed you bewitched.</span>
				<<else>>
					<span class="red">You missed this morning's sermon in the cloister.</span> <<hcSuspicion 10>><<hopelessCycleSus 2>>
					<<if $hcChallenge.suspicionSermon>>
						<<set $hc.sermonMissed to true>>
					<</if>>
				<</if>>
				<br>
			<<elseif Time.hour gte 7 and Time.hour lte 9>>
				<span @class="$hcChallenge.suspicionSermon ? 'purple' : 'blue'">A daily sermon will be held in the cloister soon.
				<<if $hcChallenge.suspicionSermon>>
					Attendance is mandatory.
				<<elseif $hc.suspicionRevealed>>
					Failing to attend will arouse suspicion.
				<<else>>
					Siblings of the faith are expected to attend.
				<</if>>
				</span>
				<br>
			<</if>>
		<</if>>

		<<if $hcChallenge.handLongPatrol>>
			<<switch Time.hour>>
				<<case 0 1 2 3 4 5 6>><<set $hc.handLocation to "prayerroom">>
				<<case 7 8 9>><<set $hc.handLocation to "cloister">>
				<<case 10>><<set $hc.handLocation to "temple">>
				<<case 11 12 13 14 15 16 17>><<set $hc.handLocation to "guardhouse">>
				<<case 18 19 20 21 22 23>><<set $hc.handLocation to "prayerroom">>
			<</switch>>
		<<else>>
			<<switch Time.hour>>
				<<case 0 1 2 3 4 5 6>><<set $hc.handLocation to "prayerroom">>
				<<case 7 8 9>><<set $hc.handLocation to "cloister">>
				<<case 10 11>><<set $hc.handLocation to "temple">>
				<<case 12 13 14 15 16>><<set $hc.handLocation to "guardhouse">>
				<<case 17 18 19 20 21 22 23>><<set $hc.handLocation to "prayerroom">>
			<</switch>>
		<</if>>

		<<if $hc.endingETimer isnot undefined>>
			<<set $hc.endingETimer-->>
			<<if $hc.endingETimer lte 0>>
				<span class="red">Everything goes dark as a sack is pulled over your head.</span> You're quickly struck in the gut, doubling you over. You're forced to your knees.
				<br><br>

				The last thing you feel is an impact against your head.
				<br><br>

				<<link [[Next|Hopeless Cycle Ending E]]>><<pass 4 hours>><<endevent>><</link>>
				<br>
				<<exitAll>>
			<</if>>
		<</if>>

		<<if $hc.daysPassed gt 0 and Time.hour gte 13 and Time.hour lte 18 and !$hc.daily.dailyPunishment>>
			<<set _hcEvent to "dailyPunishment">>
		<<elseif Time.lastDayOfMonth is $hc.day and Time.hour gte 20 or $hc.day is 1>>
			<<set _hcEvent to "blood">>
			<span class="red">The time for the ritual has come.</span>
			<<if (Time.hour gte 22 or $hc.day is 1) and !$hc.forcedMove>>
				<<set $hc.forcedMove to true>>
				You stop what you're doing and head back to the temple.
				<br>
				<<link [[Next|Hopeless Cycle Blood Cell Late]]>><<pass 20>><<endevent>><</link>>
				<br>
				<<exitAll>>
			<</if>>
			<br>
		<<elseif $hc.daysPassed gte 9>>
			/* Emergency anti-softlock, just in case */
			<<set $hc.suspicion to 100>>
		<</if>>

		<<if ($hc.nightBreakIn is "tonight" or $hc.nightBreakIn is "heard") and Time.hour gte 5 and $hc.day isnot $hc.nightBreakInDay>>
			<<set $hc.nightBreakIn to "failed">>
			<<hcPrisonerHealth -8>>
			<<set $prisoner.harmed += 2>>
			<<set $prisoner.cleanBody -= 2>>
			<<set $prisoner.cleanBandages -= 2>>
		<</if>>

		<<if $hcChallenge.dogsTwice and $hc.dogs>>
			<<if $hc.dogs.includes("loud")>><<set _alreadyLoud to true>><</if>>
			<<set _barkbark to 0>>
			<<for _i to 0; _i lt $hc.dogsTimer.length; _i++>>
				<<if $hc.dogsTimer[_i] gt 0>>
					<<set $hc.dogsTimer[_i]-->>
					<<if $hc.dogsTimer[_i] is 0>>
						<<set $hc.dogs[_i] to "loud">>
						<<set _barkbark++>>
					<</if>>
				<</if>>
			<</for>>
			<<if _barkbark gt 0 and !_alreadyLoud>>
				<span class="blue">You hear <<= $bus isnot "garden" ? "distant" : "">> barking.</span>
				<<= _barkbark is $hc.dogs.length ? "The" : "<<Number _barkbark>> of the">> <<= $hc.dogs.length is 1 ? "dog" : "dogs">> <<= _barkbark is 1 ? "has" : "have">> become agitated again.
				<br>
			<</if>>
		<</if>>

		<<set $hc.hour to Time.hour>>
	<</if>>

	/* Every passage */

	<<if $hc.vanishedItems?.length>>
		<<if !["cell", "forest", "lake", "disposal", "guardhouse"].includes($bus) and Time.dayState isnot "night">>
			<span class="narration">Whispers spread through the temple's flock. They reach the gaoler's ears.</span>
			<span class="red">
				<<for $_labelVanished, $_valueVanished range $hc.vanishedItems>>
					<<if !$_valueVanished.fromCont>>
						<br>
						<<if $_valueVanished.type is "water">>
							Water from a bucket had leaked
						<<else>>
							<<print hcItemName($_valueVanished, "cap", "vanished")>>
							<<if ["clutter", "sheets", "herbs", "bones"].includes($_valueVanished.type)>>were<<else>>was<</if>> found
						<</if>>
						<<switch $_valueVanished.location>>
							<<case "bed">>
								under your bunk.
							<<case "cell">>
								in <<= $prisoner.name>>'s cell.
							<<case "cloister">>
								in the cloister's main hall.
							<<case "dining">>
								in the dining hall.
							<<case "prayerroom">>
								in the prayer room.
							<<case "pyre">>
								near the pyre grounds.
							<<case "temple">>
								in the main hall.
							<<case "training">>
								in the training room.
							<<default>>
								in the $_valueVanished.location.
						<</switch>>
						<<if ["clutter", "sheets", "herbs", "bones"].includes($_valueVanished.type)>>They were<<else>>It was<</if>>
						<<if $_valueVanished.type is "water">>
							cleaned up.
						<<elseif $_valueVanished.dirty gte 2 or $_valueVanished.state is "burnt">>
							promptly burned.
						<<elseif $_valueVanished.persists>>
							returned to the $_valueVanished.origin.
						<<else>>
							returned.
						<</if>>
					<</if>>
				<</for>>
				<<if $hc.suspicion gte 50>>
					You notice many of them stealing glances at you.
				<</if>>
				<<if $hc.suspicionGained gte 20>>
					<<set $_susPlus to 3>>
				<<elseif $hc.suspicionGained gte 10>>
					<<set $_susPlus to 2>>
				<<else>>
					<<set $_susPlus to 1>>
				<</if>>
				<<hcSuspicion $hc.suspicionGained>><<hopelessCycleSus $_susPlus>>
			</span>
			<<run delete $hc.suspicionGained>><<set $hc.vanishedItems to []>>
			<br>
		<</if>>
	<</if>>
	<<if _leak?.includes("held")>>
		<<set _bucketOutput to _leak.filter(x => x is "held").length gt 1 ? "buckets" : "bucket">>
		<<if !["disposal", "forest", "lake"].includes($bus)>>
			<span class="red">The water leaks out of your _bucketOutput, making a horrible mess everywhere.</span> <<hopelessCycleSus 2>>
		<<else>>
			<span class="purple">The water leaks out of your _bucketOutput.</span>
		<</if>>
		<br>
	<</if>>

	<<if Time.dayState isnot "night" and ["cloister", "training", "quarters", "temple", "garden", "pyre", "dining"].includes($bus)>>
		<<set _susFromHeld to 0>>
		<<set _hcItemWarnings to []>>
		/* Items that are suspicious when held outside a container. Items inside containers are only inspected when entering or leaving the dungeon. */
		<<run $hcItems.filter(things => things.location is "held" &&
			(["bones"].includes(things.type) ||
			["clothes", "sheets"].includes(things.type) && V.bus !== "quarters" && things.name !== "bloodstained sack" ||
			["stolen food", "stolen fruit"].includes(things.name) && !things.used && !["dining","garden"].includes(V.bus))).forEach(thing => {
				T.hcItemWarnings.push(thing.type);
				T.susFromHeld++;
			})>>
		<<if _hcItemWarnings.length>>
			<<hcSuspicion _susFromHeld>>
			<span class="red">
				You are attracting glances.
				<<if _hcItemWarnings.includesAny("clothes", "sheets")>>
					Clothing and sheets outside of the quarters will raise suspicion.
				<</if>>
				<<if _hcItemWarnings.includes("food")>>
					You're smuggling stolen food out in the open!
				<</if>>
				<<if _hcItemWarnings.includes("bones")>>
					You hear whispers of the bones you're holding.
				<</if>>
			</span>
			<<hopelessCycleSus 1>>
			<br>
		<</if>>
	<</if>>

	/* Clamp */
	<<set $prisoner.health to Math.clamp($prisoner.health, 0, 30)>>
	<<set $prisoner.cleanBody to Math.clamp($prisoner.cleanBody, 0, 4)>>
	<<set $prisoner.cleanBandages to Math.clamp($prisoner.cleanBandages, 0, 4)>>
	<<set $hc.suspicion to Math.clamp($hc.suspicion, 0, 100)>>
	<<set $prisoner.love to Math.clamp($prisoner.love, -20, 100)>>

	/* Suspicion */
	<<if $hc.suspicionRevealed and ["temple", "cloister", "training", "dining", "quarters", "bed", "garden", "pyre", "prayerroom", "guardhouse", "cell"].includes($bus) and _hcEvent isnot "blood">>
		<<crimeicon "mark">> The Hand's gaze:
		<div class="meter">
			<<print '<div class="redbar" style="width:' + $hc.suspicion + '%"></div>'>>
		</div>
		<br>
	<</if>>

	/* Items */
	<<set _itemsHere to []>>
	<<hopelessCycleItemEffects>>

<</widget>>

<<widget "hopelessCycleStatus">>
	<<if $prisonerEvents.includes("health")>>
		<<set $_prisonerClothesItem to $hcItems.find(clothes => clothes.type is "clothes" and clothes.location is "prisoner")>>
		<<set $_prisonerSheet to $hcItems.find(sheet => sheet.type is "sheets" and sheet.location is "prisoner")>>
		<br>
		<<switch $prisoner.health>>
			<<case 30 29 28 27 26>>
				<<if Time.lastDayOfMonth is $hc.day and $hc.daily.dailyPunishment or !$hc.suspicionRevealed>>
					<span class="green"><<print $prisoner.name.toUpperFirst()>> is healthy.</span>
				<<else>>
					<span class="red"><<print $prisoner.name.toUpperFirst()>> is suspiciously healthy.</span>
				<</if>>
			<<case 25 24 23 22 21 20>><span class="green"><<print $prisoner.name.toUpperFirst()>> is healthy.</span>
			<<case 19 18 17 16>><span class="teal"><<print $prisoner.name.toUpperFirst()>> is decently healthy.</span>
			<<case 15 14 13 12>><span class="blue"><<print $prisoner.name.toUpperFirst()>> is sickly.</span>
			<<case 11 10 9 8>><span class="purple"><<print $prisoner.name.toUpperFirst()>> is sickly and hurt.</span>
			<<case 7 6 5 4>><span class="pink"><<print $prisoner.name.toUpperFirst()>> is very sick, and isn't moving much.</span>
			<<case 3 2 1 0>><span class="red"><<print $prisoner.name.toUpperFirst()>> is unresponsive.</span>
		<</switch>>
		<br>
		<<if $_prisonerClothesItem>>
			She wears a $_prisonerClothesItem.nameText.
			<<if $_prisonerSheet>>
				<span class="blue">A bedsheet covers her lower body.</span>
			<</if>>
		<<else>>
			<<if !$prisoner.bandagesOn>>
				<span class="red">She is fully naked.</span>
			<<else>>
				<span class="lewd">She is naked, save for her bandages.</span>
			<</if>>
			<<if $_prisonerSheet>>
				<span class="blue">A bedsheet covers her lower body.</span>
			<<elseif Time.dayState is "night">>
				<span class="red">She shivers.</span>
			<</if>>
		<</if>>
		<br>
		<<switch $prisoner.cleanBody>>
			<<case 4>><span class="green">Her body is clean.</span>
			<<case 3>><span class="teal">Her body is mostly clean.</span>
			<<case 2>><span class="purple">Dirt clings to her body.</span>
			<<case 1>><span class="pink">Dirt and grime stick to her body.</span>
			<<case 0>><span class="red">Black, ichorous fluid trails down her body.</span>
		<</switch>>
		<<if !$prisonerEvents.includes("wash") and ($prisoner.bandagesOn or $_prisonerClothesItem)>>
			<span class="pink"><i>She must be fully naked to be washed.</i></span>
		<</if>>
		<br>
		<<if $prisoner.bandagesOn>>
			<<switch $prisoner.cleanBandages>>
				<<case 4>><span class="green">Her bandages are fresh.</span>
				<<case 3>><span class="teal">Her bandages are clean.</span>
				<<case 2>><span class="purple">Her bandages are frayed and reddened.</span>
				<<case 1>><span class="pink">Her bandages are filthy.</span>
				<<case 0>><span class="red">Her bandages are tainted.</span>
			<</switch>>
		<<else>>
			<span class="purple">Her bandages have been removed, and <<= $prisoner.harmedRecently gt 0 and $prisonerEvents.includes("punishmentIntro") ? "fresh wounds" : "her injuries">> are exposed.</span>
		<</if>>
		<br>
	<</if>>
	<<if $prisonerEvents.includes("hunger")>>
		<<if $hc.daily.fed>>
			<span class="green">She's been fed today.</span>
		<<else>>
			<span class="pink">She hasn't been fed today.</span>
		<</if>>
		<br>
	<</if>>
	<<if $prisonerEvents.includes("wash")>>
		<<if $hc.daily.washed>>
			<<if $hcChallenge.prisonerClean and $prisoner.cleanBody lt 4>>
				<span class="blue">She's been washed today,</span> <span class="purple">but her wounds are too foul to clean in a single session.</span>
				<<if $prisoner.bandagesOn or $_prisonerClothesItem>>
					<span class="purple italic">She must be fully naked to be washed.</span>
				<</if>>
			<<else>>
				<span class="green">She's been washed today.</span>
			<</if>>
		<<else>>
			<span class="pink">She hasn't been washed today.
			<<if $prisoner.bandagesOn or $_prisonerClothesItem>>
				<i>She must be fully naked to be washed.</i>
			<</if>>
			</span>
		<</if>>
		<br>
	<</if>>
	<<if $prisonerEvents.includes("brand")>>
		<<if $hc.daily.treated>>
			<span class="green">Her burns have been treated.</span>
		<<else>>
			<span class="red">Her burns haven't been treated.
			<<if $prisoner.bandagesOn or $_prisonerClothesItem>>
				<i>She must be fully naked to treat them.</i>
			<</if>>
			</span>
		<</if>>
		<br>
	<</if>>

	<<if $prisoner.health lte 7 and $prisoner.state isnot "dogs">>
		<<set $prisoner.state to "catatonic">>
	<<elseif $prisoner.state is "dogs">>
		<<if ["dusk","night"].includes(Time.dayState) and $prisoner.health gte 8 and $prisonerEvents.includes("wash")>>
			<<set $prisoner.state to "lucid">>
		<</if>>
	<<elseif $prisoner.state isnot "catatonic">>
		<<if Time.dayState is "night">>
			<<if $prisoner.awakeTimer>>
				<<set $prisoner.awakeTimer-->>
				<<if $prisoner.awakeTimer lte 0>>
					<<run delete $prisoner.awakeTimer>>
				<</if>>
			<</if>>
			<<if !$prisoner.awakeTimer>>
				<<set $prisoner.state to "asleep">>
			<</if>>
		<<else>>
			<<run delete $prisoner.awakeTimer>>
			<<set $prisoner.state to "awake">>
		<</if>>
	<<else>>
		<<if $prisoner.health gte 8 and $prisonerEvents.includes("wash")>>
			<<set $prisoner.state to "lucid">>
		<</if>>
	<</if>>
	<<if $prisonerEvents.includes("health")>>
		<<switch $prisoner.state>>
			<<case "lucid">>
				<<set $prisoner.state to "awake">>
				<span class="gold">She seems to be lucid again.</span>
			<<case "awake">>
				She's currently awake.
			<<case "asleep">>
				<span class="blue">She's currently asleep.</span>
			<<case "dogs">>
				<<if $hc.dogs.includes("loud")>>
					<span class="red">She writhes on the ground, lashing out as a dog barks outside.</span>
				<<else>>
					<span class="red">She writhes on the ground.</span>
				<</if>>
			<<default>>
				<span class="red">She doesn't seem to be aware of her surroundings.</span>
		<</switch>>
		<<if $hcAction is "enter">>
			<<if $prisoner.state is "awake">>
				<<if $prisoner.harmed gte Math.floor($prisoner.love / 6)>>
					<span class="red">She glares with hatred as you enter.</span>
				<<elseif $prisoner.love gte 60>>
					<span class="green">She warmly smiles at you as you enter.</span>
				<<elseif $prisoner.love gte 25 and $prisonerEvents.includes("tongue")>>
					<span class="teal">The tension in her body fades as you enter. She seems relieved that it's you.</span>
				<<else>>
					<span class="pink">She tenses up as you enter.</span>
				<</if>>
			<</if>>
		<</if>>
		<br>
	<</if>>
<</widget>>

<<widget "hopelessCycleItemEffects">>
	<<handheldon>>
	<<if hcItemLitTorch()>>
		<<wearProp "torch">>
	<</if>>

	<<if $itemAction>>
		<<if $itemActionObject>>
			<<set $_itemText to hcItemName($itemActionObject, false, false, true)>>
		<</if>>
		<span class="gold">
		<<switch $itemAction>>
			<<case "water">>
				<<if $bus is "lake">>
					You fill the bucket from the lake.
				<<else>>
					<<if $hc.wellTainted>>
						You fill the bucket from the well. <span class="red">Red and purple hues swirl in the tainted water within.</span>
					<<else>>
						You lower the bucket into the well by its rope and winch. You pull it back up, now full of water.
					<</if>>
				<</if>>
			<<case "pickUp">>You pick up $_itemText.
			<<case "return">>
				<<if ["bucket", "snuffer"].includes($itemActionObject.type)>>
					You hang $_itemText back up.
				<<else>>
					You put $_itemText back where you found <<= $itemActionObject.type is "herbs" ? "them" : "it">>.
				<</if>>
			<<case "down">>You put down $_itemText.
			<<case "drop">>You drop $_itemText.
			<<case "dropStash">>You stash $_itemText under your bed.
			<<case "dropDirty">>You drop $_itemText, and it becomes dirty.
			<<case "dropStashDirty">>You stash $_itemText under your bed, and it becomes dirty.
			<<case "disposal">>
				You throw $_itemText into the disposal channel.
				<<if $_itemText is "clothes">>
					The wicked have no second skin to hide behind, now.
				<</if>>
				<<if $itemActionObject and $itemActionObject.dirty gte 2>>
					<<set $hc.disposals += 2>>
					<<if $hc.shortcutCount isnot undefined>><<set $hc.shortcutCount += 2>><</if>>
				<<elseif $itemActionObject.state isnot "snuffed" and $itemActionObject.state isnot "lit">>
					<<set $hc.disposals ++>>
					<<if $hc.shortcutCount isnot undefined>><<set $hc.shortcutCount++>><</if>>
				<<elseif $hcChallenge.forestNoShortcut>>
					You feel that <span class="blue">$itemActionObject.state torches are not accepted as offerings</span>.
				<</if>>

			<<case "putInBucket">>You put $_itemText in a bucket. <<if ["snuffer"].includes($itemActionObject.type)>>It rattles around noisily.<</if>>
			<<case "fromBucket">>You take $_itemText from the bucket.
			<<case "emptyDisposal">>
				You dump $_itemText into the disposal channel.
				<<if $torchOffering>>
					/* it should not be possible to put lit torches in a bucket, so no need to account for them */
					<<unset $torchOffering>>
					You feel that <span class="blue">snuffed torches are not accepted as offerings</span>.
				<</if>>
			<<case "emptyWell">>
				<<if $bus is "lake">>
					You empty $_itemText into the lake.
				<<else>>
					You empty $_itemText back into the well.
				<</if>>
			<<case "emptyGarden">>
				You dump out $_itemText at the edge of the forest.
			<<case "kick">>
				<<if !["disposal", "forest", "lake"].includes($bus)>>
					<span class="red">You kick over $_itemText. The water makes a horrible mess everywhere. <<hopelessCycleSus 2>></span>
				<<else>>
					You kick over $_itemText.
				<</if>>
			<<case "pickUpLit">>You quickly pick up the burning torch.
			<<case "pickUpSnuffed">>You pick up the unlit torch.
			<<case "pickUpBurnt">>You retrieve the remains of the torch.
			<<case "pickUpLitSconce">>You retrieve your torch from the sconce.
			<<case "pickUpSnuffedSconce">>You retrieve the snuffed torch from the sconce.
			<<case "pickUpBurntSconce">>You retrieve the remains of the torch from the sconce.

			<<case "dungeonLit">>You take a prepared torch from the stockpile and light it with another torch.
			<<case "dungeonSnuffed">>You take a snuffed torch from the wall of the dungeon.
			<<case "dungeonBack">>You place your torch back in the stack after ensuring it won't re-ignite itself.
			<<case "putCell">>You place your torch in the cell's sconce.
			<<case "putDisposal">>You place your torch in the rusty sconce.
			<<case "refresh">>You dig through the guardhouse's supplies. You add cloth, kindling and some animal fat to your torch. You give it a swing to make sure nothing comes loose. It holds.
			<<case "reignite">>You hold your torch against the other, quickly re-igniting it.
			<<case "reignitePyre">>
				<<if Time.hour gte 20 or Time.hour lte 2>>
					You press the head of your torch into the pyre.
				<<else>>
					You press the head of your torch into the burning coals.
				<</if>>
			<<case "snuff">>You quickly snuff out the torch with your snuffer.
			<<case "extinguish">>You quickly snuff out the torch with the water. It steams and sizzles, but goes out. Both the water and torch are ruined.
			<<case "disposalBurnt" "disposalSnuffed">>You toss the unlit torch into the disposal channel.
			<<case "disposalLit">>You toss your still-burning torch into the disposal channel, where it is immediately snuffed out.

			<<case "clean">>You diligently scrub $_itemText clean.
			<<case "burn">>You commit $_itemText to the pyre.
				<<if $itemActionObject.dirty gte 2>>
					Your siblings look pleased with your offering. <<stress -6>><<purity 5>><<lstress>><<gpurity>><<hopelessCycleSus -2>>
				<</if>>

			<<case "armour">>You change into your armour. It's a slow, noisy process.
			<<case "robes">>You change into your robes.
			<<case "undressPrisoner">>
				You undress <<print $prisoner.name>>.
				<<if $prisoner.harmed gte Math.floor($prisoner.love / 6)>>
					She doesn't make it easy.
				<<elseif $prisoner.love gte 45>>
					She glares at you suggestively.
				<</if>>
			<<case "undressPrisonerAsleep">>
				You undress <<print $prisoner.name>>.
				<<if $prisoner.love gte 45>>
					She quickly wakes up, but calms down upon seeing that it's you.
				<<else>>
					She quickly wakes up and tries to push you away.
				<</if>>
			<<case "dressPrisoner">>You dress <<print $prisoner.name>> in the $itemActionObject.name.
			<<case "bandagesRemove">>You remove her bandages. <<if $hc.daily.treatedDayBefore>><<run delete $hc.daily.treatedDayBefore>>The spent medicinal herbs fall away from her body.<</if>>
			<<case "bandagesApply">>You apply $itemActionObject.nameText.

			<<case "petTheDog">>You pet the dog. It happily bounds around you.

			<<case "surrender">>You give back some of the burden you've shouldered.
			<<case "embrace">>You hug Virgo, and take some of its burden.
			<<default>>
				<span class="red">Error in 'Hopeless Cycle' event: invalid action: $itemAction, name: $itemActionObject.name </span>
				<<if $hcItemError>>
					<br>
					<span class="red">Invalid item!: $hcItemError</span>
				<</if>>
		<</switch>>
		</span>
		<br>
	<</if>>
	<<unset $itemAction>><<unset $itemActionObject>><<unset $hcItemError>>
<</widget>>

<<widget "hopelessCycleItemLinks">>
	<<set $_items to $hcItems.filter(item => !item.hidden)>>
	<<set $_itemsHeld to $_items.filter(item => item.location is "held")>>
	<<set $_itemsDropped to $_items.filter(item => item.location is $bus)>>
	<<set _containers to $_items.filter(item => item.containerID and ["held", $bus].includes(item.location))>>

	<<run $hcItems.filter(item => item.dirty isnot undefined).forEach(item => {
		item.nameText = item.name;
		if (item.used and ["bandages"].includes(item.type)) item.nameText = "used " + item.nameText;
		if (item.used and ["food"].includes(item.type)) {
			if (item.name is "stolen food") {
				item.nameText = "stolen dish"
			} else {
				item.nameText = "used dish";
			}
		}
		if (item.type is "water") {
			if (item.dirty gte 2) {
				item.nameText = "<span class='purple'>tainted water</span>"
			} else if (item.dirty is 1) {
				item.nameText = " <span class='blue'>used water</span>"
			} else {
				item.nameText = " <span class='teal'>clean water</span>"
			}
		} else {
			if (item.dirty gte 2) {
				item.nameText += " <span class='purple'>(tainted)</span>"
			} else if (item.dirty is 1) {
				item.nameText += " <span class='brown'>(dirty)</span>"
			} else {
				item.nameText += " <span class='grey'>(clean)</span>"
			}
		}
	})>>

	<<if _containers.length>>
		<<set _containersHere to _containers.filter(cont => cont.location is V.bus).length>>
		<<set _containersHereIndex to 0>>
		<<set _containersHeld to _containers.filter(cont => cont.location is "held").length>>
		<<set _containersHeldIndex to 0>>
		<<run _containers.forEach((gucket, index) => {
			gucket.nameText = gucket.name;
			gucket.tooltip = null;
			if (gucket.location is V.bus) {
				if (_containersHere gte 2) {
					_containersHereIndex++;
					$_int = _containersHereIndex;
					gucket.nameText = ordinalSuffixOf($_int) + " " + gucket.name;
				}
			} else {
				if (_containersHeld gte 2) {
					_containersHeldIndex++;
					$_int = _containersHeldIndex;
					gucket.nameText = ordinalSuffixOf($_int) + " held " + gucket.name;
				} else {
					gucket.nameText = "held " + gucket.name;
				}
			}
			let gucketItems = V.hcItems.filter(thing => thing.location === gucket.containerID);
			if (gucketItems.length is 0) {
				gucket.nameText += " <span class='black'>(empty)</span>"
			} else {
				let water = gucketItems.find(thing => thing.type === "water");
				if (water) {
					water.nameText = water.name;
					switch (water.dirty) {
						case 0:
							gucket.nameText += " <span class='teal'>(clean water";
							break;
						case 1:
							gucket.nameText += " <span class='blue'>(used water";
							water.nameText = "used water";
							break;
						default:
							gucket.nameText += " <span class='purple'>(tainted water";
							water.nameText = "tainted water";
							break;
					}
					if (V.hcChallenge.waterLeaky) {
						gucket.nameText += ", <<number " + water.time + ">> hour";
						if (water.time >= 2) {
							gucket.nameText += "s)</span>";
						} else {
							gucket.nameText += ")</span>";
						}
					} else {
						gucket.nameText += ")</span>";
					}
				}
				if (gucketItems.some(item => item.type isnot "water") and gucket.capacity) {
					let cHas = gucketItems.length;
					let cCap = gucket.capacity;
					let itemsIn = [];
					V.hcItems.filter(c => c.location === gucket.containerID).forEach(c => {
						let itemName = c.nameText || c.name;
						itemsIn.push(itemName.toUpperFirst());
					});
					let itemsInText = formatList(itemsIn);
					gucket.tooltip = ` <span tooltip="<span class='gold'>` + itemsInText + `</span>" class="tooltip-anchor"><span class='gold'>(items ` + cHas +`/` + cCap + `)</span></span>`;
				}
			}
		})>>
	<</if>>

	/* Item types that can't be put into containers */
	<<set _hcBlacklist to ["bucket", "container", "prisoner"]>>

	/* Places torches can be put */
	<<set _hcSconces to ["cell", "disposal"]>>

	<<if $_itemsDropped.length or _itemsHere.filter(items => !["water", "fire"].includes(items)).length>>
		<b><u>Items here:</u></b><br>
	<</if>>

	/* ToDo: Improve when proper inventory system is made. I will only ask God for forgiveness. */

	/* Infinite items, mostly for debug, water or torch */
	/* _itemsHere is set per-passage to designate a location that has infinite items to take */
	<<if _itemsHere.length>>
		<<for $_labelHere, $_valueHere range _itemsHere.filter(items => !["water", "fire"].includes(items))>>
			/* Protect the player from themselves */
			<<if $hcItems.filter(tooMany => tooMany.type is $_valueHere).length gte 8>>
				<<set $_outOfStock to true>>
				<<hcicon $_valueHere>><<print $_valueHere.toUpperFirst()>> <span class="red">(you've taken too many!)</span>
			<<elseif $_valueHere is "torch">>
				<<set $_outOfStock to false>>
				<<if $hc.dungeonTorchState is "snuffed">>
					<<hcicon "torch_unlit">>Torches <span class="blue">(snuffed)</span>
				<<elseif $hc.dungeonTorchState is "burnt">>
					<<hcicon "torch_burnt">>Torches <span class="red">(burnt out)</span>
				<<else>>
					<<set $_torchTimeDisplay to $hcChallenge.torchFaster ? Math.clamp(Math.floor($hc.dungeonTorchTime/2),1,12) : $hc.dungeonTorchTime>>
					<<hcicon "torch">>Torches <span class="orange">(<<number $_torchTimeDisplay>> <<pluralise $_torchTimeDisplay "hour">>)</span>
				<</if>>
			<<else>>
				<<set $_outOfStock to false>>
				<<hcicon $_valueHere>><<print $_valueHere.toUpperFirst()>> <span class="green">(plentiful)</span>
			<</if>>
			/* If an absurd amount hasn't been taken and dropped, and has a free hand */
			<<if !$_outOfStock>>
				<<capture $_valueHere>>
					<<if $_itemsHeld.length lt 2>>
						<<if $_valueHere is "torch">>
							/* Infinite torches in the guardhouse. */
							<<set $_torchTime to $hc.dungeonTorchTime || 2>>
							<<if $hcChallenge.torchFaster and $_torchTime is 1>>
								<<set $_torchTime++>>
							<<elseif $hcChallenge.torchFaster and $_torchTime % 2 != 0>>
								<<set $_torchTime-->>
							<</if>>
							<<set $_torchState to $hc.dungeonTorchState is "lit" ? "lit" : "snuffed">>
							<<set $_torchAction to "dungeon" + $_torchState.toUpperFirst()>>
							<<set $_torchText to $hc.dungeonTorchState is "lit" ? "Take and light an unused torch" : "Take an unlit torch">>
							<<capture $_torchTime, $_torchState, $_torchAction>>
								| <<link [[`$_torchText`|$passage]]>><<run hcItemAdd({ type: "torch", name: "torch", location: "held", origin: V.bus, time: $_torchTime, state: $_torchState, inSconce: false}, "held", $_torchAction)>><</link>>
							<</capture>>
						<<else>>
							/* Anything else pushed to _itemsHere in-passage. Use with care. */
							| <<link [[Take|$passage]]>>
								<<run hcItemAdd($_valueHere, "held", "pickUp")>>
							<</link>>
						<</if>>
					<</if>>
					/* Place item in held or dropped container instead */
					<<for $_labelGucket, $_valueGucket range _containers>>
						<<set $_itemsInThisContainer to $hcItems.filter(item => item.location is $_valueGucket.containerID)>>
						<<if $_itemsInThisContainer.length lt $_valueGucket.capacity and !$_itemsInThisContainer.some(water => water.type is "water") and !_hcBlacklist.includes($_valueHere) and !($_valueHere is "torch" and $hc.dungeonTorchState is "lit")>>
							<<capture $_valueGucket>>
								<<if $_valueHere is "torch" and $hc.dungeonTorchState isnot "lit">>
									/* Infinite torches in the guardhouse. */
									<<set $_torchTime to $hc.dungeonTorchTime || 2>>
									<<if $hcChallenge.torchFaster and $_torchTime is 1>>
										<<set $_torchTime++>>
									<<elseif $hcChallenge.torchFaster and $_torchTime % 2 != 0>>
										<<set $_torchTime-->>
									<</if>>
									<<set $_torchState to "snuffed">>
									<<set $_torchAction to "dungeon" + $_torchState.toUpperFirst()>>
									<<set $_torchText to "Put an unlit torch in " + $_valueGucket.nameText>>
									<<capture $_torchTime, $_torchState, $_torchAction>>
										| <<link [[`$_torchText`|$passage]]>><<run hcItemAdd({ type: "torch", name: "torch", location: $_valueGucket.containerID, origin: V.bus, time: $_torchTime, state: $_torchState, inSconce: false}, $_valueGucket.containerID, $_torchAction)>><</link>>
									<</capture>>
								<<else>>
									| <<link [[`Place in $_valueGucket.nameText`|$passage]]>>
										<<run hcItemAdd($_valueHere, $_valueGucket.containerID, ("putIn" + $_valueGucket.name.toUpperFirst()))>>
									<</link>>
								<</if>>
							<</capture>>
						<</if>>
					<</for>>
				<</capture>>
			<</if>>
			<br>
		<</for>>
	<</if>>

	/* Items dropped, i.e., items with a V.hcItems entry with location set to current bus */
	<<if $_itemsDropped.length>>
		<<for $_labelDropped, $_valueDropped range $_itemsDropped>>
			<<hopelessCycleItemOptions $_valueDropped>>
		<</for>>
	<</if>>

	<<if $_itemsDropped.length or _itemsHere.filter(items => !["water","fire"].includes(items)).length>>
		<br>
	<</if>>

	/* Held items */
	<<if $_itemsHeld.length>>
		<b><u>Items held:</u><<if $_itemsHeld.length gte 2>> <span class="red">(hands full!)</span><</if>></b><br>
		<<for $_labelHeld, $_valueHeld range $_itemsHeld>>
			<<hopelessCycleItemOptions $_valueHeld>>
		<</for>>
		<br>
	<</if>>
<</widget>>

<<widget "hopelessCycleItemOptions">>
	<<set $_item to _args[0]>>

	/* Item icon and name */
	<<set $_displayName to $_item.nameText ? $_item.nameText.toUpperFirst() : $_item.name.toUpperFirst()>>
	<<if $_item.tooltip>>
		<<set $_displayName += $_item.tooltip>>
	<</if>>
	<<if $_item.type is "torch">>
		<<if $_item.state is "snuffed">>
			<<hcicon $_item>><<print $_displayName>> <span class="blue">(snuffed)</span>
		<<elseif $_item.state is "burnt">>
			<<hcicon $_item>><<print $_displayName>> <span class="red">(burnt out)</span>
		<<else>>
			<<set $_torchTimeDisplay to $hcChallenge.torchFaster ? $_item.time/2 : $_item.time>>
			<<hcicon $_item>><<print $_displayName>> <span class="orange">(<<number $_torchTimeDisplay>> <<pluralise $_torchTimeDisplay "hour">>)</span>
		<</if>>
		<<if $_item.location isnot "held">>
			<<if $_item.inSconce>>
				<span class="green">(in sconce)</span>
			<<elseif $bus is "bed">>
				<span class="green">(stashed)</span>
			<<else>>
				<span class="red">(on ground)</span>
			<</if>>
		<</if>>
	<<else>>
		<<hcicon $_item>><<print $_displayName>>
		<<if $_item.location isnot "held">>
			<<if $_item.origin is $bus and $_item.persists>>
				<span class="green">(stored)</span>
			<<elseif $bus is "bed">>
				<span class="green">(stashed)</span>
			<<else>>
				<span class="red">(on ground)</span>
			<</if>>
		<</if>>
	<</if>>

	<<if $_item.containerID>>
		<<set $_itemsInThisContainer to $hcItems.filter(items => items.location === $_item.containerID)>>
		<<set $_waterInThisContainer to $_itemsInThisContainer.find(water => water.type is "water")>>
		<<set $_persistentInThisContainer to $_itemsInThisContainer.filter(per => per.persists === true)>>
	<</if>>

	<<set $_freeHand to hcItemHasFreeHand()>>

	/* Item management */
	<<capture $_item, $_itemsInThisContainer, $_waterInThisContainer>>
		/* Any item */

		<<if $_item.location isnot "held">>
			/* Actions specific to items NOT held */

			/* Picking up, requires a free hand */
			<<if $_freeHand>>
				<<if $_item.type is "torch">>
					/* Torches */
					<<set $_toBeItemAction to "pickUp" + $_item.state.toUpperFirst()>>
					<<if $_item.inSconce>><<set $_toBeItemAction += "Sconce">><</if>>
					<<capture $_toBeItemAction>>
						| <<link [[Take|$passage]]>><<set $_item.location to "held">><<set $_item.inSconce to false>><<set $itemAction to $_toBeItemAction>><</link>>
					<</capture>>
				<<else>>
					/* Other items */
					| <<link [[Pick up|$passage]]>><<set $_item.location to "held">><<run delete $_item.vanishesIn>><<set $itemAction to "pickUp">><<set $itemActionObject to $_item>><</link>>
				<</if>>
			<</if>>

			/* Kicking over buckets full of water */
			<<if $_item.containerID and $_waterInThisContainer>>
				| <<link [[Kick it over|$passage]]>>
					<<run hcItemRemove($_waterInThisContainer, "kick")>>
					<<set $itemActionObject to $_item>>
					<<if !["disposal", "forest" ,"lake"].includes($bus)>><<hcSuspicion 10>><</if>>
				<</link>><<if !["disposal", "forest", "lake"].includes($bus)>><<hopelessCycleSus 2>><</if>>
			<</if>>

		<<elseif $_item.location is "held">>
			/* Actions specific to HELD items */

			/* Putting down or returning, skip torches */
			<<if $_item.type is "torch">>
				<<if $_item.state is "lit" and !hcItemCanReach("snuffer") and $bus isnot $_item.origin and !_hcSconces.includes($bus)>>
					<span class="red"><i>Too dangerous to <<if $bus is "bed">>stash<<else>>drop<</if>>!</i></span>
				<</if>>
			<<else>>

				/* Return */
				<<if $_item.origin is $bus>>

					/* Return used dishes */
					<<if $_item.type is "food" and $_item.used>>
						| <<link [[Return|$passage]]>>
							<<run hcItemRemove($_item, "return")>>
							<<if $_item.dirty and $_item.name is "stolen food">>
								<<hcSuspicion 5>>
							<<elseif $_item.dirty is 0>>
								<<hcSuspicion -5>>
							<</if>>
						<</link>><<if $_item.dirty and $_item.name is "stolen food">><<hopelessCycleSus 1>><<elseif $_item.dirty is 0>><<hopelessCycleSus -2>><</if>>
					<<elseif $_item.containerID>>
						<<if $_itemsInThisContainer.length is 0>>
							| <<link [[Return|$passage]]>><<run hcItemRemove($_item, "return")>><</link>>
						<<else>>
							| <<link [[Put down|$passage]]>><<set $_item.location to $bus>><<set $itemAction to "down">><<set $itemActionObject to $_item>><</link>>
						<</if>>
					<<elseif !$_item.used and !$_item.dirty>>
						| <<link [[Return|$passage]]>><<run hcItemRemove($_item, "return")>><</link>>
					<</if>>

				<<else>>

					/* Drop */
					<<if $bus is "bed">>
						<<if $_item.dirty is 0 and $_item.dirtyOnDrop>>
							| <<link "Stash <span class='red'>(will dirty!)</span>" $passage>><<set $_item.location to $bus>><<set $itemAction to "dropStashDirty">><<set $itemActionObject to $_item>><<set $_item.dirty to 1>><</link>>
						<<else>>
							| <<link [[Stash|$passage]]>><<set $_item.location to $bus>><<set $itemAction to "dropStash">><<set $itemActionObject to $_item>><</link>>
						<</if>>
					<<elseif $_item.containerID>>
						| <<link [[Put down|$passage]]>><<set $_item.location to $bus>><<set $itemAction to "down">><<set $itemActionObject to $_item>><</link>>
					<<elseif $_item.dirty isnot undefined and $_item.dirtyOnDrop>>
						/* For items that can become dirty */
						<<if $_item.dirty gte 1>>
							| <<link [[Drop|$passage]]>><<set $_item.location to $bus>><<set $itemAction to "drop">><<set $itemActionObject to $_item>><</link>>
						<<else>>
							| <<link "Drop <span class='red'>(will dirty!)</span>" $passage>><<set $_item.location to $bus>><<set $itemAction to "dropDirty">><<set $itemActionObject to $_item>><<set $_item.dirty to 1>><</link>>
						<</if>>
					<<else>>
						| <<link [[Drop|$passage]]>><<set $_item.location to $bus>><<set $itemAction to "drop">><<set $itemActionObject to $_item>><</link>>
					<</if>>
				<</if>>
			<</if>>

			/* Held containers */
			<<if $_item.containerID>>

				/* Fill empty container with water from well or lake */
				<<if _itemsHere.includes("water") and $_itemsInThisContainer.length is 0>>
					| <<link [[Fill with water (0:02)|$passage]]>><<pass 2>><<tiredness 2>><<run hcItemAdd("water", $_item.containerID, "water")>><</link>><<gtiredness>>
				<</if>>

				/* Emptying containers into disposal channel */
				<<if $_itemsInThisContainer.length and $bus is "disposal" and !$_persistentInThisContainer.length>>
					<<if $_waterInThisContainer>>
						/* water */
						| <<link [[Empty into channel (0:01)|$passage]]>>
							<<pass 1>>
							<<if $_waterInThisContainer.dirty gte 2>>
								<<set $hc.disposals += 2>>
							<<else>>
								<<set $hc.disposals++>>
							<</if>>
							<<if $hc.shortcutCount isnot undefined>><<if $_waterInThisContainer.dirty gte 2>><<set $hc.shortcutCount += 2>><<else>><<set $hc.shortcutCount++>><</if>><</if>>
							<<run hcItemRemove($_waterInThisContainer, "emptyDisposal")>>
						<</link>>
					<<else>>
						/* items */
						| <<link [[Empty into channel (0:01)|$passage]]>>
							<<pass 1>>
							<<for $_labelTrash, $_valueTrash range $_itemsInThisContainer>>
								<<if $_valueTrash.dirty gte 2>>
									<<set $hc.disposals += 2>>
								<<elseif $_valueTrash.state isnot "snuffed" and $_valueTrash.state isnot "lit">>
									<<set $hc.disposals++>>
								<<elseif $hcChallenge.forestNoShortcut>>
									<<set $torchOffering to true>>
								<</if>>
								<<if $hc.shortcutCount isnot undefined>><<if $_valueTrash.dirty gte 2>><<set $hc.shortcutCount += 2>><<else>><<set $hc.shortcutCount++>><</if>><</if>>
								<<run hcItemRemove($_valueTrash)>>
							<</for>>
							<<set $itemAction to "emptyDisposal">><<set $itemActionObject to $_item>>
						<</link>>
					<</if>>
				<</if>>

				/* Empty bucket back into well or lake */
				<<if _itemsHere.includes("water") and $_waterInThisContainer and !($bus is "garden" and $_waterInThisContainer?.dirty gte 1 and !$hc.wellTainted)>>
					<<set $_linkText to $bus is "lake" ? "Empty into lake" : "Empty back into well">>
					| <<link [[`$_linkText (0:01)`|$passage]]>>
						<<pass 1>>
						<<run hcItemRemove($_waterInThisContainer)>>
						<<set $itemAction to "emptyWell">>
						<<set $itemActionObject to $_item>>
					<</link>>
				<<elseif $bus is "garden" and $_waterInThisContainer and $_waterInThisContainer.dirty lte 1>>
					| <<link [[Dump out (0:01)|$passage]]>>
						<<pass 1>>
						<<run hcItemRemove($_waterInThisContainer)>>
						<<set $itemAction to "emptyGarden">>
						<<set $itemActionObject to $_item>>
					<</link>>
				<</if>>
			<</if>>
		<</if>>

		/* Everything below is not specific to held or dropped items */

		/* Torches */
		<<if $_item.type is "torch">>
			<<if $_item.state is "snuffed">>
				<<if (hcItemCanReach("torch", t => t.state is "lit") or $bus is "guardhouse" and $hc.dungeonTorchState is "lit")>>
					| <<link [[Re-ignite (0:01)|$passage]]>><<pass 1>><<set $_item.state to "lit">><<set $itemAction to "reignite">><</link>>
				<<elseif $bus is "pyre" and _canIgnite is true>>
					| <<link [[Re-ignite (0:01)|$passage]]>><<pass 1>><<set $_item.state to "lit">><<set $itemAction to "reignitePyre">><</link>>
				<</if>>
				<<if $_item.time lt 6 and $bus is "guardhouse">>
					| <<link [[Refresh burn time (0:05)|$passage]]>><<pass 5>><<set $_item.time += 4>><<set $itemAction to "refresh">><</link>>
				<</if>>
			<</if>>
			<<if $_item.state is "lit">>
				<<if hcItemCanReach("snuffer")>>
					| <<link [[Snuff (0:01)|$passage]]>><<pass 1>><<set $_item.state to "snuffed">><<set $itemAction to "snuff">><</link>>
					<<if $_item.origin is $bus>>
						| <<link [[Snuff and return (0:01)|$passage]]>><<pass 1>><<run hcItemRemove($_item, "dungeonBack")>><</link>>
					<</if>>
				<</if>>
			<<elseif $_item.location is "held">>
				<<if $_item.origin is $bus>>
					| <<link [[Return|$passage]]>><<run hcItemRemove($_item, "dungeonBack")>><</link>>
				<<elseif $bus is "bed">>
					| <<link [[Stash|$passage]]>><<set $_item.location to $bus>><<set $itemAction to "dropStash">><<set $itemActionObject to $_item>><</link>>
				<<else>>
					| <<link [[Drop|$passage]]>><<set $_item.location to $bus>><<set $itemAction to "drop">><<set $itemActionObject to $_item>><</link>>
				<</if>>
			<</if>>
			<<if _hcSconces.includes($bus) and !$_item.inSconce>>
				<<set $_torchAlreadyHere to $hcItems.find(torch => torch.type is "torch" and torch.location is $bus and torch.inSconce is true)>>
				<<if $_torchAlreadyHere>>
					<<capture $_torchAlreadyHere>>
						| <<link [[Replace in sconce|$passage]]>>
							<<set $_torchAlreadyHere.location to $_item.location>><<set $_torchAlreadyHere.inSconce to false>>
							<<set $_item.location to $bus>><<set $_item.inSconce to true>><<set $itemAction to "put" + $bus.toUpperFirst()>>
						<</link>>
					<</capture>>
				<<else>>
					| <<link [[Place in sconce|$passage]]>><<set $_item.location to $bus>><<set $_item.inSconce to true>><<set $itemAction to "put" + $bus.toUpperFirst()>><</link>>
				<</if>>
			<</if>>
			<<if $bus is "disposal">>
				<<if !$hc.glassfingers and $_item.state is "lit">>
					| <<link [[Dispose of|Hopeless Cycle Disposal Glassfingers]]>><<set $hc.glassfingers to true>><<run hcItemRemove($_item, ("disposal" + $_item.state.toUpperFirst()))>><</link>>
				<<else>>
					| <<link [[Dispose of|$passage]]>><<run hcItemRemove($_item, ("disposal" + $_item.state.toUpperFirst()))>><</link>>
				<</if>>
			<</if>>
		<</if>>

		/* Item interactions with containers held or here */
		<<if _containers.length>>
			<<for $_labelGucket, $_valueGucket range _containers>>
				<<set $_itemsInThatContainer to $hcItems.filter(items => items.location === $_valueGucket.containerID)>>
				<<set $_waterInThatContainer to $_itemsInThatContainer.find(water => water.type is "water")>>
				<<capture $_valueGucket, $_waterInThatContainer>>
					/* Extinguish torch with water in container */
					<<if $_item.type is "torch" and $_item.state is "lit" and $_waterInThatContainer>>
						| <<link [[`Extinguish in $_valueGucket.nameText (0:01)`|$passage]]>>
							<<pass 1>><<set $_item.time to 0>>
							<<set $_item.state to "burnt">>
							<<set $itemAction to "extinguish">>
							<<set $_waterInThatContainer.dirty to 2>>
						<</link>>
					<</if>>
					/* Wash item with water in container */
					<<if $_item.dirty and $_waterInThatContainer?.dirty lt 2 and $_item.type isnot "clutter">>
						| <<link [[`Clean in $_valueGucket.nameText (0:05)`|$passage]]>>
							<<pass 5>><<set $_item.dirty to 0>><<set $itemAction to "clean">><<set $itemActionObject to $_item>>
							<<if $_item.name is "bloodstained sack">><<set $_item.name to "torn vegetable sack">><</if>><<hcWash $_waterInThatContainer>>
						<</link>>
					<</if>>
					/* Put item in container */
					<<if $_itemsInThatContainer.length lt $_valueGucket.capacity and !$_waterInThatContainer and $_item.state isnot "lit" and !_hcBlacklist.includes($_item.type)>>
						| <<link [[`Place in $_valueGucket.nameText`|$passage]]>>
							<<set $_item.location to $_valueGucket.containerID>>
							<<if $_item.inSconce>><<set $_item.inSconce to false>><</if>>
							<<set $itemAction to "putIn" + $_valueGucket.name.toUpperFirst()>>
							<<set $itemActionObject to $_item>>
						<</link>>
					<</if>>
				<</capture>>
			<</for>>
		<</if>>

		/* Taking items from containers, requires free hand */
		<<if $_freeHand and $_item.containerID and $_itemsInThisContainer.length and !$_waterInThisContainer>>
			<<for $_labelCont, $_valueCont range $_itemsInThisContainer>>
				<<capture $_valueCont>>
					<<set $_linkName to $_valueCont.nameText ? $_valueCont.nameText : $_valueCont.name>>
					| <<link [[`Take $_linkName`|$passage]]>>
						<<set $_valueCont.location to "held">><<run delete $_item.vanishesIn>><<run delete $_valueCont.vanishesIn>>
						<<set $itemAction to "from" + $_item.name.toUpperFirst()>><<set $itemActionObject to $_valueCont>>
					<</link>>
				<</capture>>
			<</for>>
		<</if>>

		/* Disposal (excluding torches) */
		<<if $bus is "disposal" and !$_item.persists and $_item.name isnot "torch">>
			| <<link [[Dispose of|$passage]]>><<run hcItemRemove($_item, "disposal")>><</link>>
		<</if>>

		/* Pyre */
		<<if _itemsHere.includes("fire") and !$_item.persists>>
			| <<link [[Burn|$passage]]>>
				<<run hcItemRemove($_item, "burn")>>
				<<if ["food"].includes($_item.type) or ["sheets","clothes","bandages"].includes($_item.type) and $_item.dirty lte 1>>
					<<hcSuspicion 5>>
				<<elseif $_item.dirty gte 2>>
					<<hcSuspicion -5>>
				<</if>>
			<</link>>
			<<if ["food"].includes($_item.type) or ["sheets","clothes","bandages"].includes($_item.type) and $_item.dirty lte 1>>
				<<hopelessCycleSus 1>>
			<<elseif $_item.dirty gte 2>>
				<<hopelessCycleSus -2>>
			<</if>>
		<</if>>

		/* Specific actions */
		<<if $_item.type is "clothes" and $bus is "cell" and _canSee and !_clothesCurrent and $prisonerEvents.includes("wash")>>
			<<if !$prisonerEvents.includes("newClothes") and !$_item.dirty>>
				| <<link [[Dress her (0:05)|Hopeless Cycle Cell Clean Clothes]]>><<pass 5>><<stress 24>><<trauma 12>><<set $_item.location to "prisoner">><</link>><<ggstress>><<gtrauma>><<hopelessCycleLove 2>><<hopelessCycleSus 1>>
			<<else>>
				| <<link [[Dress her (0:05)|$passage]]>><<pass 5>><<set $itemAction to "dressPrisoner">><<set $itemActionObject to $_item>><<set $_item.location to "prisoner">><</link>>
			<</if>>
		<</if>>
	<</capture>>
	<br>
<</widget>>

<<widget "hopelessCyclePassout">>
	<span class="narration">The gaoler had pushed himself too much.</span>
	<br><br>
	<<set $stress -= 7000>>
	<<pass 1 hour>>
	<<ruffleHair>>
	<<if $hcItems.filter(x => x.location is "prisoner").length gte 1>>
		<<set $witchItems to true>>
	<</if>>
	<<run hcItemSetup()>>
	<<run $hcItems.filter(cont => cont.containerID).forEach(cont => cont.location = cont.origin)>>
	<<set $hc.neverLeftDungeon to false>><<set $hc.snuckInDungeon to false>><<set $hc.daily.enteredDungeon to false>>
	<<if _hcEvent is "night" or (_hcEvent is "dailyPunishment" and $bus is "cell") or $hc.suspicion gte 100>>
		<<link [[Everything fades to black...|Hopeless Cycle Ending E]]>><<pass 4 hours>><<endevent>><</link>>
	<<else>>
		<<link [[Everything fades to black...|Hopeless Cycle Passout]]>><</link>>
	<</if>>
	<br>
<</widget>>

<<widget "hopelessCycleBrandings">>
	<<set _brandings to {}>>
	<<if !$prisonerBrands or !$prisonerBrands.length>>
		<<set _witchBrandings to false>>
	<<else>>
		<<set _witchBrandings to $prisonerBrands.map(brands => brands.replace(/\s/g, '_'))>>

		<<run _witchBrandings.forEach(brand => { _brandings[brand] = "brand_" + brand })>>
	<</if>>
<</widget>>

<<widget "hopelessCycleOutfit">>
	<<if _args[0] is "robes">>
		<<upperruined>><<lowerruined>><<legsruined>><<feetruined>><<neckruined>><<upperwear 32>><<feetwear 36 "tan">><<neckwear 3>>
		<<set $itemAction to "robes">>
	<<else>>
		<<upperruined>><<lowerruined>><<legsruined>><<feetruined>><<neckruined>><<upperwear 170 "black" "white">><<legswear 40>><<feetwear 43>>
		<<if $prisonerEvents.includes("elkspawnPurge")>>
			<<set $worn.lower.integrity -= 300>>
		<</if>>
		<<set $itemAction to "armour">>
	<</if>>
<</widget>>

<<widget "hopelessCycleLove">><<silently>>
	<<if $prisoner.loveRevealed>>
		<<set $_plus to _args[0]>>
		<<switch $_plus>>
			<<case 3>><<set $_text_output to " | <span class='green'>+ + + Love</span>">>
			<<case 2>><<set $_text_output to " | <span class='green'>+ + Love</span>">>
			<<case 1>><<set $_text_output to " | <span class='green'>+ Love</span>">>
			<<case -1>><<set $_text_output to " | <span class='red'>- Love</span>">>
			<<case -2>><<set $_text_output to " | <span class='red'>- - Love</span>">>
			<<case -3>><<set $_text_output to " | <span class='red'>- - - Love</span>">>
			<<default>><<set $_text_output to " | <span class='green'>+ Love</span>">>
		<</switch>>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>><</widget>>

<<widget "hopelessCycleSus">><<silently>>
	<<if $hc.suspicionRevealed>>
		<<set $_plus to _args[0]>>
		<<switch $_plus>>
			<<case 3>><<set $_text_output to " | <span class='red'>+ + + Suspicion</span>">>
			<<case 2>><<set $_text_output to " | <span class='red'>+ + Suspicion</span>">>
			<<case 1>><<set $_text_output to " | <span class='red'>+ Suspicion</span>">>
			<<case -1>><<set $_text_output to " | <span class='teal'>- Suspicion</span>">>
			<<case -2>><<set $_text_output to " | <span class='teal'>- - Suspicion</span>">>
			<<case -3>><<set $_text_output to " | <span class='teal'>- - - Suspicion</span>">>
			<<default>><<set $_text_output to " | <span class='red'>+ Suspicion</span>">>
		<</switch>>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>><</widget>>

<<widget "hcicon">>
	<<set $_thing to _args[0]>>
	<<if typeof $_thing is "object">>
		<<set $_type to _args[0].type>>
	<<else>>
		<<set $_type to _args[0]>>
	<</if>>
	<<switch $_type>>
		<<case "bandages">><<icon "bandages.png">>
		<<case "bones">><<icon "bones.png">>
		<<case "bucket">><<icon "bucket.png">>
		<<case "container">><<icon "bucket.png">>
		<<case "clothes">>
			<<if typeof $_thing is "object">>
				<<if $_thing.name is "robe">>
					<<icon "clothes/monks_habit.png">>
				<<else>>
					<<icon "clothes/rag_top.png">>
				<</if>>
			<<else>>
				<<icon "clothes/rag_top.png">>
			<</if>>
		<<case "clutter">>
			<<if typeof $_thing is "object">>
				<<if $_thing.name is "witchblooms" or $_thing.name is "purified witchblooms">>
					<<tendingicon "tulip">>
				<<elseif $_thing.name is "leather gloves">>
					<<icon "clothes/work_gloves.png">>
				<<else>>
					<<icon "clothes/rag_top.png">>
				<</if>>
			<<else>>
				<<icon "clothes/rag_top.png">>
			<</if>>
		<<case "food">>
			<<if typeof $_thing is "object">>
				<<if $_thing.used>>
					<<foodicon "eat">>
				<<elseif $_thing.name is "stolen fruit">>
					<<tendingicon "plum">>
				<<elseif $_thing.name is "stolen food">>
					<<icon "tending/salmon_wellington.png">>
				<<else>>
					<<icon "tending/porridge.png">>
				<</if>>
			<<else>>
				<<icon "tending/porridge.png">>
			<</if>>
		<<case "herbs">><<tendingicon "saints_crown">>
		<<case "prisoner">><<skinicon "manacles">>
		<<case "torch">>
			<<if typeof $_thing is "object">>
				<<if $_thing.state is "burnt">>
					<<icon "torch_burnt.png">>
				<<elseif $_thing.state is "snuffed">>
					<<icon "torch_unlit.png">>
				<<else>>
					<<icon "torch.gif">>
				<</if>>
			<<else>>
				<<icon "torch.gif">>
			<</if>>
		<<case "torch_burnt">><<icon "torch_burnt.png">>
		<<case "torch_unlit">><<icon "torch_unlit.png">>
		<<case "sheets">><span class="clothes-white"><<icon "clothes/bedsheet.png">></span>
		<<case "snuffer">><<icon "torch_snuffer.png">>
		<<default>><<ind>>
	<</switch>>
<</widget>>

<<widget "hopelessCycleEndings">>
	<<set $_endings to {
		S: {name: "Faith", hint: "See every other ending first.", revealed: "Forever, As One.", colour: "gold"},
		A: {name: "Love", hint: "Become bewitched.", revealed: "By love, coerced.", colour: "green"},
		B: {name: "Desperation", hint: "Try to make things right.", revealed: "The road to hell gains a new flagstone.", colour: "teal"},
		C: {name: "Perdition", hint: "Fulfill her wish for revenge.", revealed: "Elk. Fox. Hound.", colour: "blue"},
		D: {name: "Stagnation", hint: "Do not interfere.", revealed: "The ritual completes.", colour: "purple"},
		E: {name: "Paranoia", hint: "Make your siblings question your faith.", revealed: "Betrayed by your siblings.", colour: "pink"},
		F: {name: "Hatred", hint: "Fail your duty.", revealed: "New skin, same sin.", colour: "red"}
	}>>
	<span class="gold">Endings:</span>
	<br>
	<<for $_label, $_value range $_endings>>
		<<if $hcEndings.includes($_label)>>
			<span class="narration">Ending $_label: <span @class="$_value.colour">$_value.name</span> | $_value.revealed</span>
		<<else>>
			<span class="narration">Ending ? | Hint: $_value.hint</span>
		<</if>>
		<br>
	<</for>>
	<br>
	<<if _endingSeen and Object.keys(V.hcChallenge).filter(x => V.hcChallenge[x] === true).length gt 0>>
		<<unset $hcChallengeRandom>>
		<<hcChallengeSummary "ending">>
		<<hcChallengeTierUpdate _endingSeen>>
	<</if>>
<</widget>>

<<widget "hopelessCycleEnd">>
	<<if !$frozenValues>>
		<<exit>>
	<</if>>
	<<unfreezePlayerStats>>
	<<canvas-model-override "clear">>
<</widget>>

<<widget "hcChallengeMenu">>
	<<for _hcC to 0; _hcC lt Object.keys(setup.hopelessCycleChallenges).length; _hcC++>>
		<<capture _text>>
			<<set _text to {
				key: setup.hopelessCycleChallenges[_hcC].key,
				colorSeen: "bold " + hcChallengeColor(setup.hopelessCycleChallenges[_hcC].key) + " tooltip-anchor",
				colorNot: hcChallengeColor(setup.hopelessCycleChallenges[_hcC].key) + " tooltip-anchor",
				desc: setup.hopelessCycleChallenges[_hcC].desc1,
				name: setup.hopelessCycleChallenges[_hcC].name
			}>>
			<<if $hcChallengesCompleted[_text.key] isnot "">>
				<<set _text.desc to _text.desc + "<br><br>Highest ending: <span class='" + ['','red','pink','purple','blue','teal','green','gold'][['','F','E','D','C','B','A','S'].indexOf($hcChallengesCompleted[_text.key])] + "'>" + $hcChallengesCompleted[_text.key] + "</span>">>
			<</if>>
			<label><<checkbox "$hcChallenge[_text.key]" false true autocheck>> <span @class='$hcChallengesCompleted[_text.key] is "S" ? _text.colorSeen : _text.colorNot' @tooltip="_text.desc"><<print _text.name>></span></label>
			<<if _hcC % 3 is 2>><br><<else>> | <</if>>
		<</capture>>
	<</for>>
	<br>
<</widget>>

<<widget "hcChallengeSummary">>
	<<set _sum to []>><<set _chal to []>><<set _sets to []>>
	<<for _s to 0; _s lt setup.hopelessCycleChallenges.length; _s++>>
		<<if Object.keys($hcChallenge).filter(x => $hcChallenge[x] == true).includes(setup.hopelessCycleChallenges[_s].key)>>
			<<set _sum.pushUnique(setup.hopelessCycleChallenges[_s])>>
		<</if>>
	<</for>>
	<<for _filter range [...new Set(setup.hopelessCycleChallenges.map(x => {return x.key.split(/[A-Z]/)[0]}))]>>
		<<if _sum.filter(x => x.key.split(/[A-Z]/)[0] is _filter).length gte 3>>
			<<set _sets.pushUnique(_filter)>>
			<<set _rawDescs to []>>
			<<for _c to 0; _c lt 3; _c++>>
				<<if _sum.filter(x => x.key.split(/[A-Z]/)[0] is _filter)[_c].desc2>>
					<<set _rawDescs.pushUnique(_sum.filter(x => x.key.split(/[A-Z]/)[0] is _filter)[_c].desc2)>>
				<<else>>
					<<set _rawDescs.pushUnique(_sum.filter(x => x.key.split(/[A-Z]/)[0] is _filter)[_c].desc1.split(".")[1].trim())>>
				<</if>>
				<<if _c isnot 0>>
					<<set _rawDescs[_c] to _rawDescs[_c].charAt(0).toLowerCase() + _rawDescs[_c].substring(1)>>
				<</if>>
				<<if _c isnot 2 and _sum.filter(x => x.key.split(/[A-Z]/)[0] is _filter)[_c].desc2>>
					<<set _rawDescs[_c] to _rawDescs[_c].slice(0,-1)>>
				<</if>>
				<<if _c is 2 and _rawDescs[_c].charAt(_rawDescs[_c].length-1) isnot ".">>
					<<set _rawDescs[_c] += ".">>
				<</if>>
			<</for>>
			<<set _chal.pushUnique({
				name: "<i>" + {"hand": "A Menacing Hand", "torch": "Fading Light", "faith": "Holy Virgo's Wish", "forest": "Overgrowth", "water": "Deluge", "item": "Broken Tools", "prisoner": "Nona's Sorrow", "suspicion": "Judging Eyes", "dogs": "Beasts of Romilly", "time": "Arrow of Time"}[_filter] + "</i> (" + _filter.toUpperFirst() + " set)",
				color: hcChallengeColor(_filter),
				desc: formatList(_rawDescs, "and", true, "; "),
			})>>
		<</if>>
	<</for>>
	<<for _solo to 0; _solo lt _sum.length; _solo++>>
		<<if !_sets.includes(_sum[_solo].key.split(/[A-Z]/)[0])>>
			<<if _sum[_solo].desc2>>
				<<set _descToPush to _sum[_solo].desc2>>
			<<else>>
				<<set _descToPush to _sum[_solo].desc1.split(".")[1].trim()>>
			<</if>>
			<<if _descToPush.charAt(_descToPush.length-1) isnot ".">>
				<<set _descToPush += ".">>
			<</if>>
			<<set _chal.pushUnique({
				name: _sum[_solo].name,
				color: hcChallengeColor(_sum[_solo].key),
				desc: _descToPush,
			})>>
		<</if>>
	<</for>>
	<<if _args[0] is "ending">>
		<<if _endingSeen is "S">>
			<b>Challenges completed:</b>
		<<else>>
			<b>Challenges failed:</b>
		<</if>>
		/* Can't populate an array and use formatList() for this because it'll just print the last challenge over and over */
		<<for _p range _chal>>
			<span @class="_p.color" @tooltip="_p.desc"><<print _p.name>></span><<if _chal.indexOf(_p) lt _chal.length-1>>,<<else>>.<</if>>
			<<if _chal.indexOf(_p) is _chal.length-2>>and<</if>>
		<</for>>
		<br><br>
	<<elseif _args[0] is "journal">>
		You selected the following challenges:
		<ul class="journal">
			<<for _p range _chal>>
				<li><span @class="_p.color" @tooltip="_p.desc"><<print _p.name>></span></li>
			<</for>>
		</ul>
	<<else>>
		<b>Challenges selected:</b>
		<br>
		<<for _p range _chal>>
			<span @class="_p.color" @tooltip="_p.desc"><<print _p.name>></span><<if _chal.indexOf(_p) lt _chal.length-1>>,<<else>>.<</if>>
			<<if _chal.indexOf(_p) is _chal.length-2>>and<</if>>
		<</for>>
		<br>
	<</if>>
<</widget>>

<<widget "hcDetailsBestRun">>
	<<set _sum to []>><<set _chal to []>><<set _sets to []>>
	<<for _s to 0; _s lt setup.hopelessCycleChallenges.length; _s++>>
		<<if $hcChallengesRun.includes(setup.hopelessCycleChallenges[_s].key)>>
			<<set _sum.pushUnique(setup.hopelessCycleChallenges[_s])>>
		<</if>>
	<</for>>
	<<for _filter range [...new Set(setup.hopelessCycleChallenges.map(x => {return x.key.split(/[A-Z]/)[0]}))]>>
		<<if _sum.filter(x => x.key.split(/[A-Z]/)[0] is _filter).length gte 3>>
			<<set _sets.pushUnique(_filter)>>
			<<set _chal.pushUnique({
				name: "<i>" + {"hand": "A Menacing Hand", "torch": "Fading Light", "faith": "Holy Virgo's Wish", "forest": "Overgrowth", "water": "Deluge", "item": "Broken Tools", "prisoner": "Nona's Sorrow", "suspicion": "Judging Eyes", "dogs": "Beasts of Romilly", "time": "Arrow of Time"}[_filter] + "</i> (" + _filter.toUpperFirst() + " set x3)",
				color: hcChallengeColor(_filter),
			})>>
		<</if>>
	<</for>>
	<<for _solo to 0; _solo lt _sum.length; _solo++>>
		<<if !_sets.includes(_sum[_solo].key.split(/[A-Z]/)[0])>>
			<<set _chal.pushUnique({
				name: _sum[_solo].name,
				color: hcChallengeColor(_sum[_solo].key),
			})>>
		<</if>>
	<</for>>
	<<set _output to []>>
	<<for _p range _chal>>
		<<set _item to "<span class=" + _p.color + ">" + _p.name + "</span>">>
		<<set _output.push(_item)>>
	<</for>>
	<<print formatList(_output, "and")>>
<</widget>>

<<widget "hcDetailsTotal">>
	<<set _sum to []>><<set _chal to []>><<set _sets to []>>
	<<for _s to 0; _s lt setup.hopelessCycleChallenges.length; _s++>>
		<<if Object.keys($hcChallengesCompleted).filter(x => $hcChallengesCompleted[x] == "S").includes(setup.hopelessCycleChallenges[_s].key)>>
			<<set _sum.pushUnique(setup.hopelessCycleChallenges[_s])>>
		<</if>>
	<</for>>
	<<for _filter range [...new Set(setup.hopelessCycleChallenges.map(x => {return x.key.split(/[A-Z]/)[0]}))]>>
		<<if _sum.filter(x => x.key.split(/[A-Z]/)[0] is _filter).length gte 3>>
			<<set _sets.pushUnique(_filter)>>
			<<set _chal.pushUnique({
				name: "<i>" + {"hand": "A Menacing Hand", "torch": "Fading Light", "faith": "Holy Virgo's Wish", "forest": "Overgrowth", "water": "Deluge", "item": "Broken Tools", "prisoner": "Nona's Sorrow", "suspicion": "Judging Eyes", "dogs": "Beasts of Romilly", "time": "Arrow of Time"}[_filter] + "</i> (" + _filter.toUpperFirst() + " set x3)",
				color: hcChallengeColor(_filter),
			})>>
		<</if>>
	<</for>>
	<<for _solo to 0; _solo lt _sum.length; _solo++>>
		<<if !_sets.includes(_sum[_solo].key.split(/[A-Z]/)[0])>>
			<<set _chal.pushUnique({
				name: _sum[_solo].name,
				color: hcChallengeColor(_sum[_solo].key),
			})>>
		<</if>>
	<</for>>
	<<set _output to []>>
	<<for _p range _chal>>
		<<set _item to "<span class=" + _p.color + ">" + _p.name + "</span>">>
		<<set _output.push(_item)>>
	<</for>>
	<<print formatList(_output, "and")>>
<</widget>>

<<widget "hcSuspicion">>
	<<set _sus to _args[0]>>
	<<if _sus gt 0 and $hcChallenge.suspicionIncrease>>
		<<set _sus *= 2>>
	<<elseif _sus lt 0 and $hcChallenge.suspicionDecrease>>
		<<set _sus /= 2>>
	<</if>>
	<<if _args[1] isnot "sermon" or !$hcChallenge.suspicionSermon>>
		<<set $hc.suspicion += _sus>>
	<</if>>
<</widget>>

<<widget "hcPrisonerHealth">>
	<<set _health to _args[0]>>
	<<if _health gt 0 and _args[1] is "penance" and $hcChallenge.handCruel>>
		<<set _health -= 1>>
	<</if>>
	<<set $prisoner.health += _health>>
<</widget>>

<<widget "hcWash">>
	<<set _water to $hcItems.find(x => x.location is _args[0].location)>>
	<<set _water.dirty++>>
	<<if $hcChallenge.waterDirty>>
		<<set _water.dirty to 2>>
	<</if>>
<</widget>>

<<widget "hcForest">>
	<<set $_travel to $hcChallenge.forestFurther ? 4 : 5>>
	<<if _args[0] is "back">>
		<<set $_travel *= -1>>
	<</if>>
	<<set $hcForest += $_travel>>
<</widget>>

<<widget "hcTimeTaskDisplay">><<silently>>
	<<set $_time to _args[0] ? _args[0] : 60>>
	<<if $hcChallenge.timeLonger>>
		<<set $_time *= 1.5>>
	<</if>>
	<<set $_hour to Math.floor($_time / 60).toString()>>
	<<set $_minute to ($_time % 60).toString()>>
	<<if $_minute.length is 1>>
		<<set $_minute to "0" + $_minute>>
	<</if>>
<</silently>>($_hour:$_minute)<</widget>>

<<widget "hcTimeTaskPass">>
	<<set $_time to _args[0] ? _args[0] : 60>>
	<<if $hcChallenge.timeLonger>>
		<<set $_time *= 1.5>>
	<</if>>
	<<pass $_time>>
<</widget>>

<<widget "hcTimeDungeonDisplay">><<silently>>
	<<set $_time to _args[0] ? _args[0] : 30>>
	<<if $hcChallenge.timeLonger>>
		<<set $_time += 15>>
	<</if>>
<</silently>>(0:$_time)<</widget>>

<<widget "hcTimeDungeonPass">>
	<<set $_time to _args[0] ? _args[0] : 30>>
	<<if $hcChallenge.timePrayer>>
		<<set $_time += 15>>
	<</if>>
	<<pass $_time>>
<</widget>>

<<widget "hcChallengeTierUpdate">>
	<<set $_end to _args[0]>><<set $_list to []>>
	<<for $_challenge range Object.keys($hcChallenge).filter(x => $hcChallenge[x] == true)>>
		<<set $_tiers to ["","F","E","D","C","B","A","S"]>>
		<<if $_tiers.indexOf($_end) gt $_tiers.indexOf($hcChallengesCompleted[$_challenge])>>
			<<set $hcChallengesCompleted[$_challenge] to $_end>>
		<</if>>
		<<if $_end is "S">>
			<<set $_list.pushUnique($_challenge)>>
		<</if>>
	<</for>>
	<<if $_list.length gt $hcChallengesRun.length>>
		<span class="green bold">New record: <<print $_list.length>>/<<print setup.hopelessCycleChallenges.length>>!</span> Previous record: <<print $hcChallengesRun.length>>/<<print setup.hopelessCycleChallenges.length>>
		<<set $hcChallengesRun to $_list>>
		<br><br>
	<</if>>
<</widget>>

<<widget "hcChallengeRandomSliders">>
	<!-- The range slider macro doesn't work if it's directly inside passage text. It only works inside a widget -->
	<<rangeslider "$hcChallengeRandom.min" "$hcChallengeRandom.max" 1 setup.hopelessCycleChallenges.length 1 setup.hopelessCycleChallenges.length 1
		{}
		{
			value: (v1, v2) => {
				const color1 = ColourUtils.interpolateMultiple(["--black", "--red", "--orange", "--gold"], normalise(v1, setup.hopelessCycleChallenges.length, 0));
				const color2 = ColourUtils.interpolateMultiple(["--black", "--red", "--orange", "--gold"], normalise(v2, setup.hopelessCycleChallenges.length, 0));
				return `<span style="color: ${color1}">${v1}</span> - <span style="color: ${color2}">${v2}</span>`;
			},
		}
	>>
<</widget>>

<<widget "hcChallengeRandomSelect">>
	<<run Object.keys($hcChallenge).forEach(c => $hcChallenge[c] = false)>>
	<<set $_keys to setup.hopelessCycleChallenges.map(s => s.key)>>
	<<set $_num to random($hcChallengeRandom.min, $hcChallengeRandom.max)>>
	<<for _i to 0; _i lt $_num; _i++>>
		<<set $_chal to $_keys.pluck()>>
		<<set $hcChallenge[$_chal] to true>>
	<</for>>
<</widget>>
