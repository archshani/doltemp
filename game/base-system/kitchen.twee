:: Widgets Kitchen [widget]

<<widget "kitchenDisplay">>
	<div id="kitchenDisplay" class="food_ui no-numberify">
		<div id="body">
			<div id="mainSection">
				<div id="search">
					Search:
					<<textbox "_foodSearch" "">>
					<<run $(() => {
						var foodTimer = null;
						$('#textbox--foodsearch').on('input change keypress', e => {
							_foodSearch = e.target.value;
							clearTimeout(foodTimer);
							foodTimer = setTimeout(updateUI, 300);
						});
						var updateUI = () => {
							Wikifier.wikifyEval('<<if elementExists(\'#itemList\')>><<replace "#itemList">><<kitchenDisplayRecipes>><</replace>><</if>>');
						}
					})>>
					<<link "Options">>
						<<replace "#altSection">>
							<<kitchenDisplayOptions>>
							<<removeclass "#altSection, #mobileCloser" "mobileHidden">>
						<</replace>>
					<</link>>
				</div>
				<div id="itemList">
					<<kitchenDisplayRecipes>>
				</div>
			</div>
			<div id="altSection" class="mobileHidden">
				<<if $lastRecipeViewed and setup.plants[$lastRecipeViewed] and _recipeKeys.some((x) => x)>>
					<<kitchenDisplayRecipeDetail $lastRecipeViewed>>
				<<else>>
					<<kitchenDisplayOptions>>
				<</if>>
			</div>
			<div id="mobileCloser" class="mobileOnly mobileHidden" onclick="wikifier('addclass', '#altSection', 'mobileHidden'); wikifier('addclass', '#mobileCloser', 'mobileHidden');"></div>
		</div>
	</div>
	<br>
<</widget>>

<<widget "kitchenDisplayOptions">>
	<div id="basket">
		<span class="gold bold">Options:</span>
		<div class="mobileOnly">
			<<link "Close">>
				<<addclass "#altSection, #mobileCloser" "mobileHidden">>
			<</link>>
			<br><br>
		</div>
	</div>
	<div id="basketItems" class="info">
		Search for:
		<<listbox "$options.ingredientsSearch" autoselect>>
			<<option "All" "all">>
			<<option "Recipes" "recipes">>
			<<option "Ingredients" "ingredients">>
		<</listbox>>
		<<run $(() => {
			$('#listbox-optionsingredientssearch').on('input change', e => {
				Wikifier.wikifyEval('<<replace "#itemList">><<kitchenDisplayRecipes>><</replace>>');
			});
		})>>

		<br><br>
		<label>Auto-manage ingredients: <<checkbox "$options.ingredientsAutoManage" false true autocheck>></label>
		<<if $chef_state gte 3>>
			<br>
			<label>Allow lewd auto-managed ingredients: <<checkbox "$options.ingredientsAutoManageLewd" false true autocheck>></label>
			<<run $(() => {
				$('#checkbox-optionsingredientsautomanage').on('input change', e => {
					if (!$options.ingredientsAutoManageLewd) Wikifier.wikifyEval('<<replace "#itemList">><<kitchenDisplayRecipes>><</replace>>');
				});
				$('#checkbox-optionsingredientsautomanagelewd').on('input change', e => {
					Wikifier.wikifyEval('<<replace "#itemList">><<kitchenDisplayRecipes>><</replace>>');
				});
			})>>
		<</if>>
	</div>
<</widget>>

<<widget "kitchenDisplayRecipes">>
	<<kitchenFilter>>
	<<if _recipeKeys.some(key => key.group isnot "Provided Ingredients")>>
		<<for _category range _recipesGroups>>
			<<if !_recipeKeys.find(key => key.group is _category)>><<continue>><</if>>
			<<set _categoryVar to "_" + _category.replace(" ", "")>>
			<<foldout false _categoryVar>>
				<span class="gold"><<print _category.toLocaleUpperFirst()>></span>
				<<set _filteredRecipes to _recipeKeys.filter(key => key.group is _category)>>
				<<for $_i, $_keyObject range _filteredRecipes>>
					<div @id="$_keyObject.key" class="item"><<kitchenDisplayRecipe $_keyObject.key>></div>
					<<if $_i < _filteredRecipes.length - 1>><hr><</if>>
				<</for>>
			<</foldout>>
		<</for>>
	<<else>>
		<<if !Object.values(V.plants).some(item => item.recipe)>>
			<div class="info">You haven't learned how to cook yet! Attend housekeeping classes to unlock new recipes.</div>
		<</if>>
		<<for _category range _recipesGroups>>
			<<if !_recipeKeys.find(key => key.group is _category)>><<continue>><</if>>
			<<set _categoryVar to "_" + _category.replace(" ", "")>>
			<<foldout false _categoryVar>>
				<span class="gold"><<print _category.toLocaleUpperFirst()>></span>
				<<set _filteredRecipes to _recipeKeys.filter(key => key.group is _category)>>
				<<for $_i, $_keyObject range _filteredRecipes>>
					<div @id="$_keyObject.key" class="item"><<kitchenDisplayRecipe $_keyObject.key>></div>
					<<if $_i < _filteredRecipes.length - 1>><hr><</if>>
				<</for>>
			<</foldout>>
		<</for>>
	<</if>>
<</widget>>

<<widget "kitchenDisplayRecipe">>
	<<set $_setupItem to setup.plants[_args[0]]>>
	<div class="details">
		<div>
			<<tendingicon $_setupItem.icon>> <<recipe_name _args[0] "cap">> |
			Owned: <span class="gold"><<print $plants[_args[0]].amount>></span>
		</div>
		<<set $_group to _recipeKeys.find((obj) => obj.key is _args[0]).group>>
		<<switch $_group>>
			<<case "Missing Ingredients">>
				<div>
					<span class="red">Missing:</span>
					<<print formatList($_setupItem.ingredients.filter(ingredient => {
						return ingredientsTotal(ingredient, _args[0], true) lte 0 and !ingredientsProvided(ingredient, _args[0]);
					}).sort(), "and", true).replace(/_/g, " ")>>
				</div>
			<<case "Restricted Ingredients">>
				<div>
					<span class="red">Restricted:</span>
					<<print formatList($_setupItem.ingredients.filter(ingredient => {
						return !ingredientIsAllowed(ingredient);
					}).sort(), "and", true).replace(/_/g, " ")>>
				</div>
		<</switch>>
	</div>
	<div class="recipe">
		<<capture _args[0]>>
			<<if $options.images is 1>>
				<<set _file to `recipe_${setup.plants[_args[0]].type}.png`>>
				<<link "<<iconUi _file>>">>
					<<replace "#altSection">><<kitchenDisplayRecipeDetail _args[0]>><</replace>>
					<<removeclass "#altSection, #mobileCloser" "mobileHidden">>
				<</link>>
			<<else>>
				<<link "Details">>
					<<replace "#altSection">><<kitchenDisplayRecipeDetail _args[0]>><</replace>>
					<<removeclass "#altSection, #mobileCloser" "mobileHidden">>
				<</link>>
			<</if>>
		<</capture>>
	</div>
<</widget>>

<<widget "kitchenDisplayRecipeDetail">>
	<<set $lastRecipeViewed to _recipeKeys.some((obj) => obj.key is _args[0]) ? _args[0] : _recipeKeys[0].key>>
	<<set $_setupItem to setup.plants[$lastRecipeViewed]>>
	<div id="basket">
		<div>
			<<tendingicon $_setupItem.icon>>
			<div class="recipeTitle"><<recipe_name $lastRecipeViewed "cap">>:</div>
		</div>
		<div class="mobileOnly">
			<<link "Close">>
				<<addclass "#altSection, #mobileCloser" "mobileHidden">>
			<</link>>
		</div>
	</div>
	<<set _basketOpen to false>>
	<div id="basketItems">
		Owned: <span class="gold"><<print $plants[$lastRecipeViewed].amount>></span>
		<<if $_setupItem?.ingredients.length>>
			<br>
			Time: <span class="gold"><<print $_setupItem.days>></span> <<pluralise $_setupItem.days "minute">>
			<br>
			Result: <span class="gold"><<print $_setupItem.multiplier>></span>
			<hr>
		<</if>>
		<div id="requiredForRecipe">
			<<requiredForRecipe $lastRecipeViewed>>
			<<kitchenDisplayRecipeMake>>
		</div>
		<<knownFoodRecipes $lastRecipeViewed>>
	</div>
<</widget>>

<<widget "kitchenDisplayRecipeMake">>
	<<set $_setupItem to setup.plants[$lastRecipeViewed]>>
	<<set $_group to _recipeKeys.find((obj) => obj.key is $lastRecipeViewed).group>>
	<div style="margin-top: 16px">
		<<if $_setupItem?.ingredients.length>>
			<<switch $_group>>
				<<case "Restricted Ingredients">>
					<span class="purple">Some required ingredients are banned in this kitchen.</span>
				<<case "Missing Ingredients">>
					<span class="purple">You do not have all the required ingredients.</span>
				<<default>>
					<<if $tiredness gte C.tiredness.max>>
						<span class="purple">You're too tired to cook!</span>
					<<elseif $_setupItem.ingredients.every(ingredient => $plants[ingredientUsed(ingredient, $lastRecipeViewed)].amount gte 1 or _ingredientsSupplied?.includes(ingredientUsed(ingredient, $lastRecipeViewed)))>>
						Make:
						<<set _hours to Math.floor($_setupItem.days / 60)>>
						<<set _minutes to $_setupItem.days % 60>>
						<<set _timeString to " (" + (_hours lt 10 ? "0": "") +_hours+":"+(_minutes lt 10 ? "0": "")+_minutes+")">>
						<<link [["1" + _timeString|$passage]]>><<make_recipe $lastRecipeViewed 1>><</link>>
						<<if $_setupItem.ingredients.every(ingredient => $plants[ingredientUsed(ingredient, $lastRecipeViewed)].amount gte 3 or _ingredientsSupplied?.includes(ingredientUsed(ingredient, $lastRecipeViewed)))>>
							<<set _hours to Math.floor($_setupItem.days * 3 / 60)>>
							<<set _minutes to ($_setupItem.days * 3) % 60>>
							<<set _timeString to " (" + (_hours lt 10 ? "0": "") +_hours+":"+(_minutes lt 10 ? "0": "")+_minutes+")">>

							/* Prevent passing too much time */
							<<set _futureTime to new DateTime(Time.date.timeStamp)>>
							<<set _futureTime to _futureTime.addHours(_hours)>>
							<<set _futureTime to _futureTime.addMinutes(_minutes)>>

							<<if !_hourRestriction or _futureTime.hour lt _hourRestriction or _futureTime.minute lte 15>>
								| <<link [["3" + _timeString|$passage]]>><<make_recipe $lastRecipeViewed 3>><</link>>
							<</if>>
						<</if>>
						<br>
						<<if $_group is "Provided Ingredients">><span class="purple">This kitchen gives you access to an infinite supply of this item.</span><</if>>
					<<elseif $_group is "Provided Ingredients">>
						<span class="purple">You do not have the ingredients to make this item, but you have access to an infinite supply of it in this kitchen.</span>
					<<else>>
						<span class="purple">You are missing an ingredient, but may be able to use a substitute.</span>
					<</if>>
			<</switch>>
		<<else>>
			<<switch $_group>>
				<<case "Provided">>
					<span class="purple">This kitchen provides you with an infinite supply of this ingredient.</span>
				<<case "Restricted Ingredients">>
					<span class="purple">This ingredient is banned in this kitchen.</span>
				<<case "Missing Ingredients">>
					<<if $_setupItem.shop>>
						<span class="purple">You need to find a means to buy or access these.</span>
					<<else>>
						<span class="purple">You need to find a means to access these.</span>
					<</if>>
			<</switch>>
		<</if>>
	</div>
<</widget>>

<<widget "requiredForRecipe">>
	<<if Array.isArray(setup.plants[_args[0]]?.ingredients) and setup.plants[_args[0]]?.ingredients.length gt 0>>
		Ingredients:
		<div class="itemSummary">
			<<for $_ingredient range clone(setup.plants[_args[0]].ingredients).sort()>>
				<<set $_usedIngredient to ingredientUsed($_ingredient, _args[0])>>
				<div class="basketItem">
					<<set _icon to setup.plants[$_usedIngredient].ingredientIcon || setup.plants[$_usedIngredient].icon>>
					<<tendingicon _icon>>
					<<print $_usedIngredient.replace(/_/g, " ").toLocaleUpperFirst()>>
					<<if _ingredientsSupplied?.includes($_usedIngredient)>>
						<span class="gold">(∞)</span>
					<<else>>
						<<set _ingredientsUnavailable to $plants[$_usedIngredient].amount gt 0>>
						<span @class="$plants[$_usedIngredient].amount gt 0 ? 'gold' : 'red'">(<<print $plants[$_usedIngredient].amount>>)</span>
					<</if>>
					<<if !$options.ingredientsAutoManage and ingredientsOptions($_ingredient, _args[0]).length gt 1>>
						<<capture $_ingredient _args[0] _args[1]>>
							<<link ">>">>
								<<run ingredientsNextAlternative($_ingredient, _args[0])>>
								<<replace "#requiredForRecipe">>
									<<requiredForRecipe _args[0] _args[1]>>
									<<kitchenDisplayRecipeMake>>
								<</replace>>
							<</link>>
						<</capture>>
					<</if>>
				</div>
			<</for>>
		</div>
	<</if>>
<</widget>>

<<widget "learn_recipe">>
	<<if $plants[_args[0]].recipe isnot true>>
		<span class="gold">You have learned how to make <<recipe_name _args[0] "article">>!</span>
		<<tendingicon setup.plants[_args[0]].icon>>
	<</if>>
	<<set $plants[_args[0]].recipe to true>>

	<<set _recipes_known to 0>>
	<<set _food_keys_recipes to Object.keys(setup.plants)>>
	<<for _e to 0; _e lt _food_keys_recipes.length; _e++>>
		<<set _food_recipes to _food_keys_recipes[_e]>>
		<<if $plants[_food_recipes].recipe is true>>
			<<set _recipes_known++>>
		<</if>>
	<</for>>
	<<if _recipes_known gte 5>>
		<<earnFeat "Chef de Tournant">>
	<</if>>
	<<if _recipes_known gte 20>>
		<<earnFeat "Chef de Partie">>
	<</if>>
	<<if _recipes_known gte 50>>
		<<earnFeat "Sous Chef">>
	<</if>>
<</widget>>

<<widget "learn_recipe_all">>
	<<set _food_keys to Object.keys(setup.plants)>>
	<<for $_i to 0; $_i lt _food_keys.length; $_i++>>
		<<set _food to _food_keys[$_i]>>
		<<if setup.plants[_food].ingredients.length gte 1>>
			<<learn_recipe _food>>
		<</if>>
	<</for>>
<</widget>>

<<widget "make_recipe">>
	<<set $_amount to _args[1] or 1>>
	<<tending_give _args[0] `setup.plants[_args[0]].multiplier * $_amount`>>
	<<for $_ingredient range setup.plants[_args[0]].ingredients>>
		<<if !_ingredientsSupplied?.includes($_ingredient) or !_ingredientsSupplied?.includes(ingredientUsed($_ingredient, _args[0]))>>
			<<set $_ingredient to ingredientUsed($_ingredient, _args[0])>>
			<<tending_give $_ingredient `-$_amount`>>
		<</if>>
	<</for>>
	<<wearProp setup.plants[_args[0]].handheld>>
	<<pass `setup.plants[_args[0]].days * $_amount`>>
	<<if $bus is "avery_kitchen" and $avery_mansion.jobs.includes("kitchen") and $_amount gte random(1,3)>>
		<<set $avery_mansion.kitchen_made += $_amount>>
	<</if>>
<</widget>>

<<widget "knownFoodRecipes">>
	<<if _args[0]>>
		<<set _knownRecipes to []>>
		<<set _possibleRecipes to 0>>
		<<run Object.keys(setup.plants).forEach(item => {
			if (setup.plants[item]?.ingredients.includes(_args[0])) {
				_possibleRecipes++;
				if ($plants[item].recipe) _knownRecipes.pushUnique(item);
			}
		})>>

		<<if _knownRecipes.length>>
			<hr>
			Known Recipes (_knownRecipes.length / _possibleRecipes):
			<br>
			<<for $_recipe range _knownRecipes>>
				<div class="recipe">
					<div><<tendingicon setup.plants[$_recipe].icon>></div>
					<div>
						<mouse class="tooltip">
							<<print $_recipe.replace(/_/g, " ").toLocaleUpperFirst()>>
													<span>
								Ingredients:
								<ul>
									<<for $_secondaryIngredients range setup.plants[$_recipe].ingredients>>
										<li>
											<<print $_secondaryIngredients.replace(/_/g, " ").toLocaleUpperFirst()>>
											<<if _ingredientsSupplied?.includes($_secondaryIngredients)>>
												<i class="gold">(∞)</i>
											<<else>>
												<i class="gold">(<<print $plants[$_secondaryIngredients].amount>>)</i>
											<</if>>
										</li>
									<</for>>
								</ul>
							</span>
						</mouse>
					</div>
				</div>
			<</for>>
		<<elseif _possibleRecipes isnot 0>>
			<hr>
			You don't know any recipes that use this item.
		<</if>>
		<<if setup.plants[_args[0]]?.type is "food" and Array.isArray($plants[_args[0]].knownFavorite) and $plants[_args[0]].knownFavorite.length>>
			<hr>
			Known Favourite:
				<<for $_npc range $plants[_args[0]].knownFavorite>>
					<br>
					<<iconUi "sym_love.png">><<print $_npc>>
				<</for>>
		<</if>>
	<</if>>
<</widget>>

<<widget "ingredientsSupplied">>
	<<set _ingredientsSupplied to []>>
	<<if typeof _args[0] is "object">>
		<<run _args[0].forEach(key => _ingredientsSupplied.pushUnique(key))>>
	<<elseif _args[0]>>
		<<run _args.forEach(key => _ingredientsSupplied.pushUnique(key))>>
	<</if>>
<</widget>>

<<widget "ingredientsExceptions">>
	<<set _ingredientsExceptions to []>>
	<<if _args[0]>>
		<<run _args.forEach(key => _ingredientsExceptions.pushUnique(key))>>
	<</if>>
<</widget>>

/*
Vrel: If I remember right, that's as far as I got with the UI for the PC eating their own food.
Should probably be removed once said feature has been implemented
<<widget "food_list">>
	<summary class="journal"><<print _args[0].toLocaleUpperFirst()>></summary>
	<<set _food_keys to Object.keys(setup.plants)>>
	<<for _i to 0; _i lt _food_keys.length; _i++>>
		<<set _food to _food_keys[_i]>>

		<<if _args[0] is "sweets" and setup.plants[_food].special.includes("sweet") or
		_args[0] is "drinks" and setup.plants[_food].special.includes("drink") or
		_args[0] is "savouries" and !setup.plants[_food].special.includes("sweet") and !setup.plants[_food].special.includes("drink") and setup.plants[_food].type isnot "ingredient">>
			<<set _recipe_go to true>>
		<<else>>
			<<set _recipe_go to false>>
		<</if>>
		<<if $plants[_food].recipe is true and _recipe_go is true>>
		<div class="kitchen-recipe-box">
			<div class="recipe-text"><<tendingicon setup.plants[_food].icon>><<print _food.toLocaleUpperFirst().replace(/_/g," ")>></div>
			Number owned: <<print $plants[_food].amount>>
			<br>
			<<if _ingredients_available isnot false>>
				<<capture _food>>
					<br>
					<<if $tiredness gte C.tiredness.max>>
						<span class="purple">You're too tired to cook!</span>
					<<else>>
						<<link [[Make|$passage]]>><<make_recipe _food>><</link>>
					<</if>>
				<</capture>>
			<</if>>
			<<set _recipe_known to true>>
		</div>
		<</if>>
	<</for>>
	<<if _recipe_known is false>>
		<span class="blue">You know no recipes!</span> <span class="gold">You can learn them from the housekeeping class at school.</span>
	<</if>>
<</widget>>

<<widget "food_list_all">>
	<<food_list "savouries">>
	<br>
	<<food_list "sweets">>
	<br>
	<<food_list "drinks">>
	<br>
<</widget>>*/

<<widget "housekeeping_exam_select">>
	<<unset $chosen_recipe>>
	<<set _food_keys to Object.keys(setup.plants)>>
	<<set _possible_recipes to []>>
	<<set $_foodOptions to Object.entries(clone(setup.plants)).filter(([key, item]) => !$plants[key].recipe and item.ingredients?.length)>>
	<<for $_difficulty to 1; $_difficulty lt 5; $_difficulty++>>
		<<run $_foodOptions.forEach(([key, item]) => {
			if (item.difficulty is $_difficulty and item.ingredients.every(ingredient => !setup.plants[ingredient].ingredients?.length or $plants[ingredient].recipe)) {
				_possible_recipes.pushUnique(key);
			}
		})>>
		<<if _possible_recipes.length>>
			<<if Object.keys($plants).filter(key => !$plants[key].recipe and setup.plants[key].ingredients.length and setup.plants[key].difficulty is $_difficulty).length
				is Object.keys($plants).filter(key => setup.plants[key].ingredients.length and setup.plants[key].difficulty is $_difficulty).length>>
				<<set _difficultyNotice to $_difficulty>>
			<</if>>
			<<set $chosen_recipe to _possible_recipes.pluck()>>
			<<break>>
		<</if>>
	<</for>>
	<<if !$chosen_recipe>><<set $chosen_recipe to "none">><</if>>
<</widget>>

<<widget "avery_food_select">>
	<<set $avery_mansion.food_last to $gift.name>>
	<<set $avery_requested_food to $avery_mansion.food.name>>
	<<unset $chosen_recipe>>
	<<set _food_keys to Object.keys(setup.plants)>>
	<<set _possible_recipes to []>>
	<<set $_foodOptions to Object.entries(clone(setup.plants)).filter(([key, item]) => item.ingredients?.length && item.type !== "ingredient" && !item.special.includes("drink"))>>

	<<if C.npc.Avery.dom gte 75>>
		<<set $_difficulty to 4>>
	<<elseif C.npc.Avery.dom gte 50>>
		<<set $_difficulty to 3>>
	<<elseif C.npc.Avery.dom gte 25>>
		<<set $_difficulty to 2>>
	<<else>>
		<<set $_difficulty to 1>>
	<</if>>
	<<run $_foodOptions.forEach(([key, item]) => {
		if (item.difficulty is $_difficulty) {
			_possible_recipes.pushUnique(setup.plants[key]);
		}
	})>>
	<<if _possible_recipes.length>>
		<<set $chosen_recipe to _possible_recipes.pluck()>>
	<</if>>

	<<if !$chosen_recipe>><<set $chosen_recipe to "none">><</if>>
	<<set $avery_mansion.food to $chosen_recipe>>

	/* once Avery has chosen a new meal, the player loses the chance to learn the recipes they'd asked to learn prior */
	<<set $avery_mansion.recipe to []>>
<</widget>>

<<widget "food_gift_list">>
	<<set _food_keys to Object.keys(setup.plants)>>
	<<for _i to 0; _i lt _food_keys.length; _i++>>
		<<set _food to _food_keys[_i]>>
		<<if setup.plants[_food].type is "food">>
			<<if $plants[_food].amount gte 1>>
				<<set _food_gift_found to true>>
				<<set _color to $bus is "avery_dining" and _food is $avery_mansion.food.name ? "gold" : "">>
				<label><<tendingicon setup.plants[_food].icon>><span @class="_color"><<recipe_name _food "cap">> (<<print $plants[_food].amount>>)</span> <<radiobutton "$gift" setup.plants[_food] checked>></label> |
			<</if>>
		<</if>>
	<</for>>
	<<if _food_gift_found isnot true>>
		You don't have any homemade food to gift.
	<</if>>
	<br><br>
<</widget>>

<<widget "give_gift">>
	<<tending_give $gift.name -1>>
	<<set $daily.giftedFood[_args[0]] to $gift.name>>
<</widget>>

<<widget "recipe_name">><<silently>>
	<<set $_difficultyColour to _args[1]?.includes("difficulty") ? ["","green","blue","purple","pink","red"][setup.plants[_args[0]].difficulty] : "white">>
	<<set $_recipeName to _args[1]?.includes("plural") ? setup.plants[_args[0]].plural : setup.plants[_args[0]]?.recipe_name or setup.plants[_args[0]].name.replace(/_/g," ")>>
	<<if _args[1]?.includes("cap")>>
		<<set $_recipeName to $_recipeName.toUpperFirst()>>
	<</if>>
	<<if !_args[1]>>
		<<set $_recipeName to $_recipeName.replace(/^(a |an |the )/i, "")>>
	<</if>>
<</silently>><span @class=$_difficultyColour><<print $_recipeName>></span><</widget>>

<<widget "saveFavoriteFood">>
	<<if C.npc[_args[0]] and setup.plants[_args[1]]?.type is "food">>
		<<if !$plants[_args[1]].knownFavorite>><<set $plants[_args[1]].knownFavorite to []>><</if>>
		<<run $plants[_args[1]].knownFavorite.pushUnique(_args[0])>>
	<</if>>
<</widget>>

<<widget "recipe_exam_description">>
	<<if setup.plants[_args[0]].ingredients.length lt 1>>
		<span class="black">Food item "_args[0]" is not a cookable recipe! Please report this!</span>
	<<else>>
		<<if _difficultyNotice is 1>>
			"We're going to start you off with simpler recipes," River says. "These are easier to make, but still either helpful or tasty. We're starting off with a recipe for <<recipe_name _args[0] "difficulty">>." <<He>> clears <<his>> throat.
		<<elseif _difficultyNotice is 2>>
			"We're moving up a level," River says. "You've demonstrated knowledge of the basics. Good. These next dishes are more complex, either because they take longer to make, require more ingredients, or are easier to make mistakes with. Today, you'll be learning to make <<recipe_name _args[0] "difficulty">>." <<He>> clears <<his>> throat.
		<<elseif _difficultyNotice is 3>>
			"We're moving to the advanced dishes today," River says. "Generally, the harder a dish, the more 'worth it' making it is. Though that's all subjective, of course. Your first advanced exam will be a recipe for <<recipe_name _args[0] "difficulty">>." <<He>> clears <<his>> throat.
		<<elseif _difficultyNotice is 4>>
			River claps to grab the class's attention. "As of today, you will be learning even more difficult dishes. There are not very many dishes left I can teach you. Regardless, these next few exams will be the hardest you've taken in this class yet. The first of them will be a recipe for <<recipe_name _args[0] "difficulty">>." <<He>> clears <<his>> throat.
		<<else>>
			"You will be learning a recipe for <<recipe_name _args[0] "difficulty">>," River says.
		<</if>>

		<<switch _args[0]>>
			<<case "apple_crumble">>
				"Very similar to an apple crisp, but there are differences. It's all in the topping."
			<<case "apple_strudel">>
				"If you're making these yourself, I recommend eating them warm. Fortunately, they're also good cold."
			<<case "arancini">>
				"Careful you don't burn yourself. Yes, I'll be saying that every time we're working with hot oil. It's important."
			<<case "bakewell_tart">>
				"Cherry bakewell tart, specifically. You can experiment with other fruit in your own time."
			<<case "banana_bread">>
				"Very similar to pumpkin bread or zucchini bread, but bananas are the cheapest for the academy to buy in bulk."
			<<case "bangers_and_mash">>
				"Don't be intimidated by the full plate. It's more arranging than anything."
			<<case "beef_wellington">>
				"You remember salmon wellington. This is very similar. Beef is hardier than salmon, so you don't need to be as delicate, but this is compounded by the serving size for beef wellington being larger."
			<<case "belgian_bun">>
				"Unlike most pastries, the cherry is not optional. If you used a different berry, it would no longer be a Belgian bun."
			<<case "bread">>
				"Homemade bread does not come pre-sliced. Yes, it's inconvenient, but you'll find it tastes far better than store-bought."
			<<case "brownie">>
				"I recommend serving warm with a scoop of vanilla ice cream. That's not on the exam, though."
			<<case "butter">>
				"I hear those groans. You'll be thanking me when the grocery store only has margarine."
			<<case "carbonara">>
				"This uses spaghetti as the base, but as with nearly all pastas, the flavour lies in the sauce. And the pork, in this case."
			<<case "carrot_cake">>
				"I know that, by name alone, it doesn't sound appealing. But stow your expectations. I think you'll be surprised."
			<<case "cauliflower_cheese">>
				"Don't chop the cauliflower. Break it into pieces with your hands. You'll get more natural bites that way."
			<<case "cheese">>
				"Apologies to the lactose intolerant among you, but cheese is a very common ingredient in many dishes."
			<<case "cheese_and_crackers">>
				"Always nice when you have guests over. It sounds unimpressive, but this is only a few steps removed from a charcuterie board."
			<<case "cheese_topped_trout">>
				"A common culinary rule is that cheese and seafood should never be on the same plate together. Like any culinary rule, sufficiently accomplished chefs can ignore it."
			<<case "cheeseburger">>
				"If you can make hamburgers, there's no reason you can't make this. Do not use pre-sliced cheese. Slice your own cheese, it's worth it."
			<<case "chelsea_bun">>
				"If you've ever had a cinnamon bun, these are extremely similar. The main difference is that Chelsea buns are more glazed, while cinnamon buns are more frosted."
			<<case "chicken_tikka_masala">>
				"The tikka and the masala- or the chicken and the sauce- are made separately, and then combined to simmer. This will test your ability to focus on two different processes at once."
			<<case "chicken_vindaloo">>
				"I will be entirely honest with you. This is likely the spiciest dish you'll learn in this class. If you have a problem with spice, well, I'm afraid that's a you problem."
			<<case "chilli_con_carne">>
				"Chilli con carne has a thicker sauce than standard chilli, and uses chunks of beef rather than ground beef. Many of the fundamentals are the same, however."
			<<case "chips">>
				"One of the most popular side dishes there is, and for a reason."
			<<case "choc_chip_cookie">>
				"Do not flatten them before putting them in the oven. Keep the dough in balls. They flatten out while baking."
			<<case "chocolate">>
				"This is for using as ingredients, not for eating on its own. That being said, there is no chef on this planet that has <i>never</i> had a nibble anyway."
			<<case "clam_chowder">>
				"Chowder is not just a type of soup; it's thicker and creamier. It's also unlike stew, as stew is meatier and tends to lack the cream that chowder has." A few students snicker at the description. River ignores them.
			<<case "crumpet">>
				"These are porous, to allow for spreadings to soak in. I recommend eating with honey or jam."
			<<case "crème_brulee">>
				"You may have seen recipes saying you need a blow torch for the best effect. That's not true. Broiling it will do just as well."
			<<case "fish_and_chips">>
				"Go to any pub in town, and they'll be serving this." <<He>> pauses. "I was speaking generally. That is not encouragement to go to pubs."
			<<case "flapjack">>
				"Not pancakes. These are made to be snacks, not breakfast."
			<<case "flour">>
				"Not the most exciting recipe, I'm aware, but you'll want to know how to make it. Flour is the foundation of so many meals."
			<<case "full_english_breakfast">>
				"It's called a breakfast, but you can have this any time of day. You shouldn't. But you can."
			<<case "ghostbrew">>
				<!-- failsafe -->
				<<He>> pauses. "Wait. This wasn't in the syllabus. You shouldn't be learning about this." <<He>> clicks <<his>> tongue. "<span class="red">Report this to Vrelnir when you have a second.</span> In the meantime, I suppose we'll just... push on."
			<<case "hamburger">>
				"The quintessential junk food." <<He>> smiles thinly. "But you're not making junk food. You're learning to make <i>real</i> hamburgers."
			<<case "honey">>
				"To be honest, I would prefer if you just bought honey. Foraging for honeycomb is far too dangerous and tedious just to make some dessert. The local stores don't stock it, though, so here we are."
			<<case "honeyed_pork">>
				"Adding hints of sweetness to a savoury dish is a common trick. That being said, in this case, the honey sauce is just a glaze applied to the pork."
			<<case "jam">>
				"Not jelly. Jam and jelly are two separate things; jam uses fruit, jelly uses fruit juice. We're not getting into preserves."
			<<case "jammie_dodger">>
				"If you don't care about looks, you don't need to make the hole shaped exactly like a heart. However, for the sake of this exam, I <i>will</i> be judging aesthetics. Keep that in mind."
			<<case "kedgeree">>
				"Some purists will insist haddock is the only option for fish; anything else, like salmon or tuna, and it's not a kedgeree. I don't believe this to be the case, though haddock is notably more traditional than other fish."
			<<case "lasagne">>
				"Anyone who makes a 'pasta cake' joke will be on dish cleaning duty."
			<<case "lemon_meringue_pie">>
				"The ideal lemon meringue pie is not overpowering in its sourness. It's more tart than anything, blended with sweetness."
			<<case "lemonade">>
				"An excellent drink for the summer months, if you wish to cool off. Serve it hot for a satisfactory cold remedy, alongside some honey."
			<<case "linguine">>
				"It's recommended you use linguine as a base for other flavours, like seafood or alfredo. However, if your linguine cannot stand on its own, no amount of sauce will cover that up."
			<<case "macaroni_cheese">>
				"Remember to boil it for less time than the package says for. It will finish cooking in the oven."
			<<case "melting_moment">>
				"A rare pastry that doesn't require eggs to make."
			<<case "mince_pie">>
				"This was originally mince<i>meat</i> pie, and the meat was eventually phased out of the recipe. However, the 'mince' part of the name isn't actually derived from mincemeat. Though that's a lesson for English class, perhaps."
			<<case "naan_bread">>
				"This makes for an excellent side, especially if you slather it in garlic butter. It's not a main dish, however. A snack at most."
			<<case "omelette">>
				"A simple breakfast. You can add anything you want to this, but the exam will only focus on the fundamental technique."
			<<case "onion_bhaji">>
				"I'm aware some of you take issue with onion, either due to the taste or the texture. Hopefully, this dish will help you get over that."
			<<case "orange_juice">>
				"I see those eye rolls. If you'd like to stuff your body with preservatives, by all means, keep drinking store-bought."
			<<case "pasta">>
				"The foundation for so many savoury meals. Much like pastries and sweet dishes."
				<<if $plants.pastry.recipe>>
					<<He>> smiles. "Sound familiar?"
				<</if>>
			<<case "pastry">>
				"The foundation for so many sweet meals. Much like pasta and savoury dishes."
				<<if $plants.pasta.recipe>>
					<<He>> smiles. "Sound familiar?"
				<</if>>
			<<case "peach_panzanella">>
				"The bread must be cubed, and the peaches must be sliced into wedges. That's not a hard rule for the dish itself, but it's a requirement for this exam. This lesson is primarily about knife control."
			<<case "pizza">>
				"This will still end up slightly greasy, I'm afraid. That's just what happens when you cook cheese."
			<<case "plum_pudding">>
				"Despite the name, plums aren't actually a required ingredient. Any dried fruit will do. We're using plums for this exam, however."
			<<case "poached_pear">>
				"Do not raise the water to boiling temperatures. Poaching is done at lower heat levels."
			<<case "porridge">>
				"A good breakfast for when you're in a hurry. I'd recommend adding fruit or honey for taste, but it's edible without."
			<<case "potato_pancake">>
				"Very similar to bubble and squeak, but without the vegetables on the side. This makes potato pancakes more fitting as a breakfast, or a snack."
			<<case "prawn_bisque">>
				"Do not remove the shells until the prawns have been simmered. This helps the broth gain a lot of flavour you would otherwise lose. The shells are sieved out later."
			<<case "quiche">>
				"No, this is not just a savoury pie. Really, the only things they have in common is they both use pie crust."
			<<case "rich_biscuit">>
				"If you dunk these into the tea, it's an instant failure." You can't tell if <<hes>> joking or not.
			<<case "roast_dinner">>
				"You know how to make everything that goes into this. All that matters now is putting it together."
			<<case "salad">>
				"There's more than one type of salad, of course, but most of them share the same fundamentals. If you can make a garden salad, you can probably make a Caesar salad."
			<<case "salmon_wellington">>
				"This takes a long time in the oven, and the pastry needs to chill beforehand as well. Those are just waiting periods, though, so we'll be skipping those for the exam. Otherwise we'd be here until lunch."
			<<case "samosa">>
				"You can experiment with different shapes in your own time. For now, we're learning how to make them in triangles."
			<<case "sausage_roll">>
				"We've talked a bit about sausages. Now it's time to put them to use."
			<<case "scone">>
				"Unflavoured, but don't be afraid to experiment in your own time. You could put anything in a scone." <<He>> pauses. "Almost anything."
			<<case "shortbread">>
				"Contrary to what the name would have you think, these are a type of cookie. You won't be making sandwiches with these."
			<<case "soufflé">>
				"As far as desserts go, this recipe has a reputation for a reason. It's easy to mess up, and hard to get perfect. Pay close attention while preparing."
			<<case "spaghetti_bolognese">>
				"Take care to remove the bay leaves when you're finished. They impart flavour during the cooking process, but they should not be eaten themselves."
			<<case "sponge_cake">>
				"The ideal sponge cake should be so fluffy, you barely notice it's there. ...That's a joke. If you can't notice if your cake is there, you likely haven't made anything."
			<<case "steak">>
				"I'm sure many of you have been waiting for this one. To be quite honest, I've been waiting for it too."
			<<case "sticky_toffee_pudding">>
				"As with all cakes, be careful not to overbake it. When in doubt, use the toothpick trick."
			<<case "stuffing">>
				"Thanksgiving isn't a proper holiday here, like it is overseas. That means you can make this any time of year without feeling guilty."
			<<case "sweet_and_sour_chicken">>
				"Fried, not baked. Not deep-fried, though. We're making food, not junk."
			<<case "swiss_roll">>
				"Most Swiss rolls are dark brown, due to the chocolate used. However, the chocolate is optional. We'll be skipping it for this recipe."
			<<case "tart">>
				"It tastes exactly how the name suggests."
			<<case "turnip_soup">>
				"This is a meal I've made more times than I can count. Not the most exciting dish, but keeps your stomach full and warm."
			<<case "wolfbrew">>
				<!-- failsafe -->
				<<He>> pauses. "Wait. This wasn't in the syllabus. You shouldn't be learning about this." <<He>> clicks <<his>> tongue. "<span class="red">Report this to Vrelnir when you have a second.</span> In the meantime, I suppose we'll just... push on."
			<<case "yorkshire_pudding">>
				"This isn't the type of pudding you would have for dessert. If you're making this alongside roast beef, use the meat drippings for extra flavour."
			<<default>>
				"Let's get right into it."
				<<if $debug is 1 or $options.debugdisable is "f">>
					<span class="black">Food item "_args[0]" does not have an exam description!</span>
				<</if>>
		<</switch>>
		<<if setup.plants[_args[0]].ingredients.includes("chicken_egg") and !$housekeepingTips.includes("alternativeEgg")>>
			<<set $housekeepingTips.pushUnique("alternativeEgg")>>
			<br><br>
			"Most recipes will call for standard eggs, those being chicken eggs," <<he>> adds. "But keep in mind that <span class="gold">any type of egg can be used as a substitute</span> if you don't have chicken eggs."
		<</if>>
		<<if _args[0] is "lasagne" and !$housekeepingTips.includes("alternativeLasagne")>>
			<<set $housekeepingTips.pushUnique("alternativeLasagne")>>
			<br><br>
			"Lasagne is typically made with beef," <<he>> adds. "But if you don't have any beef, or if you'd just prefer a different flavour, <span class="gold">you can also substitute chicken instead</span>. Not pork, though."
		<</if>>
	<</if>>
	<br><br>
<</widget>>

<<widget "allowLewdIngredients">>
	<<set _allowLewdIngredients to true>>
	<<if !$housekeepingTips.includes("alternativeLewd") and $plants.bottle_of_breast_milk.amount + $plants.bottle_of_semen gte 1>>
		<<set $housekeepingTips.pushUnique("alternativeLewd")>>
		You doubt you could get away with it in more controlled kitchens, but this kitchen seems quite free. If you're running short on milk or cream, <span class="gold">you may be able substitute with lewder ingredients</span>.
	<</if>>
<</widget>>
